import {
  __commonJS
} from "./chunk.2VCUNPV2.js";
var __defProp = Object.defineProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};

// node_modules/@popperjs/core/lib/index.js
var require_lib = __commonJS((exports) => {
  __markAsModule(exports);
  __export(exports, {
    afterMain: () => afterMain,
    afterRead: () => afterRead,
    afterWrite: () => afterWrite,
    applyStyles: () => applyStyles_default,
    arrow: () => arrow_default,
    auto: () => auto,
    basePlacements: () => basePlacements,
    beforeMain: () => beforeMain,
    beforeRead: () => beforeRead,
    beforeWrite: () => beforeWrite,
    bottom: () => bottom,
    clippingParents: () => clippingParents,
    computeStyles: () => computeStyles_default,
    createPopper: () => createPopper3,
    createPopperBase: () => createPopper,
    createPopperLite: () => createPopper2,
    detectOverflow: () => detectOverflow,
    end: () => end,
    eventListeners: () => eventListeners_default,
    flip: () => flip_default,
    hide: () => hide_default,
    left: () => left,
    main: () => main,
    modifierPhases: () => modifierPhases,
    offset: () => offset_default,
    placements: () => placements,
    popper: () => popper,
    popperGenerator: () => popperGenerator,
    popperOffsets: () => popperOffsets_default,
    preventOverflow: () => preventOverflow_default,
    read: () => read,
    reference: () => reference,
    right: () => right,
    start: () => start,
    top: () => top,
    variationPlacements: () => variationPlacements,
    viewport: () => viewport,
    write: () => write
  });
});

// node_modules/bootstrap/dist/js/bootstrap.min.js
var require_bootstrap_min = __commonJS((exports, module) => {
  /*!
    * Bootstrap v5.0.0-beta2 (https://getbootstrap.com/)
    * Copyright 2011-2021 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
    * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
    */
  !function(t, e) {
    typeof exports == "object" && typeof module != "undefined" ? module.exports = e(require_lib()) : typeof define == "function" && define.amd ? define(["@popperjs/core"], e) : (t = typeof globalThis != "undefined" ? globalThis : t || self).bootstrap = e(t.Popper);
  }(exports, function(t) {
    "use strict";
    function e(t2) {
      if (t2 && t2.__esModule)
        return t2;
      var e2 = Object.create(null);
      return t2 && Object.keys(t2).forEach(function(n2) {
        if (n2 !== "default") {
          var i2 = Object.getOwnPropertyDescriptor(t2, n2);
          Object.defineProperty(e2, n2, i2.get ? i2 : {enumerable: true, get: function() {
            return t2[n2];
          }});
        }
      }), e2.default = t2, Object.freeze(e2);
    }
    var n = e(t);
    function i(t2, e2) {
      for (var n2 = 0; n2 < e2.length; n2++) {
        var i2 = e2[n2];
        i2.enumerable = i2.enumerable || false, i2.configurable = true, "value" in i2 && (i2.writable = true), Object.defineProperty(t2, i2.key, i2);
      }
    }
    function o(t2, e2, n2) {
      return e2 && i(t2.prototype, e2), n2 && i(t2, n2), t2;
    }
    function s() {
      return (s = Object.assign || function(t2) {
        for (var e2 = 1; e2 < arguments.length; e2++) {
          var n2 = arguments[e2];
          for (var i2 in n2)
            Object.prototype.hasOwnProperty.call(n2, i2) && (t2[i2] = n2[i2]);
        }
        return t2;
      }).apply(this, arguments);
    }
    function r(t2, e2) {
      var n2, i2;
      t2.prototype = Object.create(e2.prototype), t2.prototype.constructor = t2, n2 = t2, i2 = e2, (Object.setPrototypeOf || function(t3, e3) {
        return t3.__proto__ = e3, t3;
      })(n2, i2);
    }
    var a, l, c = function(t2) {
      do {
        t2 += Math.floor(1e6 * Math.random());
      } while (document.getElementById(t2));
      return t2;
    }, u = function(t2) {
      var e2 = t2.getAttribute("data-bs-target");
      if (!e2 || e2 === "#") {
        var n2 = t2.getAttribute("href");
        if (!n2 || !n2.includes("#") && !n2.startsWith("."))
          return null;
        n2.includes("#") && !n2.startsWith("#") && (n2 = "#" + n2.split("#")[1]), e2 = n2 && n2 !== "#" ? n2.trim() : null;
      }
      return e2;
    }, h = function(t2) {
      var e2 = u(t2);
      return e2 && document.querySelector(e2) ? e2 : null;
    }, d = function(t2) {
      var e2 = u(t2);
      return e2 ? document.querySelector(e2) : null;
    }, f = function(t2) {
      if (!t2)
        return 0;
      var e2 = window.getComputedStyle(t2), n2 = e2.transitionDuration, i2 = e2.transitionDelay, o2 = Number.parseFloat(n2), s2 = Number.parseFloat(i2);
      return o2 || s2 ? (n2 = n2.split(",")[0], i2 = i2.split(",")[0], 1e3 * (Number.parseFloat(n2) + Number.parseFloat(i2))) : 0;
    }, p = function(t2) {
      t2.dispatchEvent(new Event("transitionend"));
    }, g = function(t2) {
      return (t2[0] || t2).nodeType;
    }, m = function(t2, e2) {
      var n2 = false, i2 = e2 + 5;
      t2.addEventListener("transitionend", function e3() {
        n2 = true, t2.removeEventListener("transitionend", e3);
      }), setTimeout(function() {
        n2 || p(t2);
      }, i2);
    }, _ = function(t2, e2, n2) {
      Object.keys(n2).forEach(function(i2) {
        var o2, s2 = n2[i2], r2 = e2[i2], a2 = r2 && g(r2) ? "element" : (o2 = r2) == null ? "" + o2 : {}.toString.call(o2).match(/\s([a-z]+)/i)[1].toLowerCase();
        if (!new RegExp(s2).test(a2))
          throw new TypeError(t2.toUpperCase() + ': Option "' + i2 + '" provided type "' + a2 + '" but expected type "' + s2 + '".');
      });
    }, v = function(t2) {
      if (!t2)
        return false;
      if (t2.style && t2.parentNode && t2.parentNode.style) {
        var e2 = getComputedStyle(t2), n2 = getComputedStyle(t2.parentNode);
        return e2.display !== "none" && n2.display !== "none" && e2.visibility !== "hidden";
      }
      return false;
    }, b = function() {
      return function() {
      };
    }, y = function(t2) {
      return t2.offsetHeight;
    }, w = function() {
      var t2 = window.jQuery;
      return t2 && !document.body.hasAttribute("data-bs-no-jquery") ? t2 : null;
    }, E = document.documentElement.dir === "rtl", T = function(t2, e2) {
      var n2;
      n2 = function() {
        var n3 = w();
        if (n3) {
          var i2 = n3.fn[t2];
          n3.fn[t2] = e2.jQueryInterface, n3.fn[t2].Constructor = e2, n3.fn[t2].noConflict = function() {
            return n3.fn[t2] = i2, e2.jQueryInterface;
          };
        }
      }, document.readyState === "loading" ? document.addEventListener("DOMContentLoaded", n2) : n2();
    }, A = (a = {}, l = 1, {set: function(t2, e2, n2) {
      t2.bsKey === void 0 && (t2.bsKey = {key: e2, id: l}, l++), a[t2.bsKey.id] = n2;
    }, get: function(t2, e2) {
      if (!t2 || t2.bsKey === void 0)
        return null;
      var n2 = t2.bsKey;
      return n2.key === e2 ? a[n2.id] : null;
    }, delete: function(t2, e2) {
      if (t2.bsKey !== void 0) {
        var n2 = t2.bsKey;
        n2.key === e2 && (delete a[n2.id], delete t2.bsKey);
      }
    }}), k = function(t2, e2, n2) {
      A.set(t2, e2, n2);
    }, L = function(t2, e2) {
      return A.get(t2, e2);
    }, C = /[^.]*(?=\..*)\.|.*/, D = /\..*/, S = /::\d+$/, N = {}, O = 1, I = {mouseenter: "mouseover", mouseleave: "mouseout"}, j = new Set(["click", "dblclick", "mouseup", "mousedown", "contextmenu", "mousewheel", "DOMMouseScroll", "mouseover", "mouseout", "mousemove", "selectstart", "selectend", "keydown", "keypress", "keyup", "orientationchange", "touchstart", "touchmove", "touchend", "touchcancel", "pointerdown", "pointermove", "pointerup", "pointerleave", "pointercancel", "gesturestart", "gesturechange", "gestureend", "focus", "blur", "change", "reset", "select", "submit", "focusin", "focusout", "load", "unload", "beforeunload", "resize", "move", "DOMContentLoaded", "readystatechange", "error", "abort", "scroll"]);
    function P(t2, e2) {
      return e2 && e2 + "::" + O++ || t2.uidEvent || O++;
    }
    function x(t2) {
      var e2 = P(t2);
      return t2.uidEvent = e2, N[e2] = N[e2] || {}, N[e2];
    }
    function H(t2, e2, n2) {
      n2 === void 0 && (n2 = null);
      for (var i2 = Object.keys(t2), o2 = 0, s2 = i2.length; o2 < s2; o2++) {
        var r2 = t2[i2[o2]];
        if (r2.originalHandler === e2 && r2.delegationSelector === n2)
          return r2;
      }
      return null;
    }
    function B(t2, e2, n2) {
      var i2 = typeof e2 == "string", o2 = i2 ? n2 : e2, s2 = t2.replace(D, ""), r2 = I[s2];
      return r2 && (s2 = r2), j.has(s2) || (s2 = t2), [i2, o2, s2];
    }
    function M(t2, e2, n2, i2, o2) {
      if (typeof e2 == "string" && t2) {
        n2 || (n2 = i2, i2 = null);
        var s2 = B(e2, n2, i2), r2 = s2[0], a2 = s2[1], l2 = s2[2], c2 = x(t2), u2 = c2[l2] || (c2[l2] = {}), h2 = H(u2, a2, r2 ? n2 : null);
        if (h2)
          h2.oneOff = h2.oneOff && o2;
        else {
          var d2 = P(a2, e2.replace(C, "")), f2 = r2 ? function(t3, e3, n3) {
            return function i3(o3) {
              for (var s3 = t3.querySelectorAll(e3), r3 = o3.target; r3 && r3 !== this; r3 = r3.parentNode)
                for (var a3 = s3.length; a3--; )
                  if (s3[a3] === r3)
                    return o3.delegateTarget = r3, i3.oneOff && K.off(t3, o3.type, n3), n3.apply(r3, [o3]);
              return null;
            };
          }(t2, n2, i2) : function(t3, e3) {
            return function n3(i3) {
              return i3.delegateTarget = t3, n3.oneOff && K.off(t3, i3.type, e3), e3.apply(t3, [i3]);
            };
          }(t2, n2);
          f2.delegationSelector = r2 ? n2 : null, f2.originalHandler = a2, f2.oneOff = o2, f2.uidEvent = d2, u2[d2] = f2, t2.addEventListener(l2, f2, r2);
        }
      }
    }
    function R(t2, e2, n2, i2, o2) {
      var s2 = H(e2[n2], i2, o2);
      s2 && (t2.removeEventListener(n2, s2, Boolean(o2)), delete e2[n2][s2.uidEvent]);
    }
    var K = {on: function(t2, e2, n2, i2) {
      M(t2, e2, n2, i2, false);
    }, one: function(t2, e2, n2, i2) {
      M(t2, e2, n2, i2, true);
    }, off: function(t2, e2, n2, i2) {
      if (typeof e2 == "string" && t2) {
        var o2 = B(e2, n2, i2), s2 = o2[0], r2 = o2[1], a2 = o2[2], l2 = a2 !== e2, c2 = x(t2), u2 = e2.startsWith(".");
        if (r2 === void 0) {
          u2 && Object.keys(c2).forEach(function(n3) {
            !function(t3, e3, n4, i3) {
              var o3 = e3[n4] || {};
              Object.keys(o3).forEach(function(s3) {
                if (s3.includes(i3)) {
                  var r3 = o3[s3];
                  R(t3, e3, n4, r3.originalHandler, r3.delegationSelector);
                }
              });
            }(t2, c2, n3, e2.slice(1));
          });
          var h2 = c2[a2] || {};
          Object.keys(h2).forEach(function(n3) {
            var i3 = n3.replace(S, "");
            if (!l2 || e2.includes(i3)) {
              var o3 = h2[n3];
              R(t2, c2, a2, o3.originalHandler, o3.delegationSelector);
            }
          });
        } else {
          if (!c2 || !c2[a2])
            return;
          R(t2, c2, a2, r2, s2 ? n2 : null);
        }
      }
    }, trigger: function(t2, e2, n2) {
      if (typeof e2 != "string" || !t2)
        return null;
      var i2, o2 = w(), s2 = e2.replace(D, ""), r2 = e2 !== s2, a2 = j.has(s2), l2 = true, c2 = true, u2 = false, h2 = null;
      return r2 && o2 && (i2 = o2.Event(e2, n2), o2(t2).trigger(i2), l2 = !i2.isPropagationStopped(), c2 = !i2.isImmediatePropagationStopped(), u2 = i2.isDefaultPrevented()), a2 ? (h2 = document.createEvent("HTMLEvents")).initEvent(s2, l2, true) : h2 = new CustomEvent(e2, {bubbles: l2, cancelable: true}), n2 !== void 0 && Object.keys(n2).forEach(function(t3) {
        Object.defineProperty(h2, t3, {get: function() {
          return n2[t3];
        }});
      }), u2 && h2.preventDefault(), c2 && t2.dispatchEvent(h2), h2.defaultPrevented && i2 !== void 0 && i2.preventDefault(), h2;
    }}, W = function() {
      function t2(t3) {
        t3 && (this._element = t3, k(t3, this.constructor.DATA_KEY, this));
      }
      return t2.prototype.dispose = function() {
        var t3, e2;
        t3 = this._element, e2 = this.constructor.DATA_KEY, A.delete(t3, e2), this._element = null;
      }, t2.getInstance = function(t3) {
        return L(t3, this.DATA_KEY);
      }, o(t2, null, [{key: "VERSION", get: function() {
        return "5.0.0-beta2";
      }}]), t2;
    }(), U = function(t2) {
      function e2() {
        return t2.apply(this, arguments) || this;
      }
      r(e2, t2);
      var n2 = e2.prototype;
      return n2.close = function(t3) {
        var e3 = t3 ? this._getRootElement(t3) : this._element, n3 = this._triggerCloseEvent(e3);
        n3 === null || n3.defaultPrevented || this._removeElement(e3);
      }, n2._getRootElement = function(t3) {
        return d(t3) || t3.closest(".alert");
      }, n2._triggerCloseEvent = function(t3) {
        return K.trigger(t3, "close.bs.alert");
      }, n2._removeElement = function(t3) {
        var e3 = this;
        if (t3.classList.remove("show"), t3.classList.contains("fade")) {
          var n3 = f(t3);
          K.one(t3, "transitionend", function() {
            return e3._destroyElement(t3);
          }), m(t3, n3);
        } else
          this._destroyElement(t3);
      }, n2._destroyElement = function(t3) {
        t3.parentNode && t3.parentNode.removeChild(t3), K.trigger(t3, "closed.bs.alert");
      }, e2.jQueryInterface = function(t3) {
        return this.each(function() {
          var n3 = L(this, "bs.alert");
          n3 || (n3 = new e2(this)), t3 === "close" && n3[t3](this);
        });
      }, e2.handleDismiss = function(t3) {
        return function(e3) {
          e3 && e3.preventDefault(), t3.close(this);
        };
      }, o(e2, null, [{key: "DATA_KEY", get: function() {
        return "bs.alert";
      }}]), e2;
    }(W);
    K.on(document, "click.bs.alert.data-api", '[data-bs-dismiss="alert"]', U.handleDismiss(new U())), T("alert", U);
    var F = function(t2) {
      function e2() {
        return t2.apply(this, arguments) || this;
      }
      return r(e2, t2), e2.prototype.toggle = function() {
        this._element.setAttribute("aria-pressed", this._element.classList.toggle("active"));
      }, e2.jQueryInterface = function(t3) {
        return this.each(function() {
          var n2 = L(this, "bs.button");
          n2 || (n2 = new e2(this)), t3 === "toggle" && n2[t3]();
        });
      }, o(e2, null, [{key: "DATA_KEY", get: function() {
        return "bs.button";
      }}]), e2;
    }(W);
    function z(t2) {
      return t2 === "true" || t2 !== "false" && (t2 === Number(t2).toString() ? Number(t2) : t2 === "" || t2 === "null" ? null : t2);
    }
    function Y(t2) {
      return t2.replace(/[A-Z]/g, function(t3) {
        return "-" + t3.toLowerCase();
      });
    }
    K.on(document, "click.bs.button.data-api", '[data-bs-toggle="button"]', function(t2) {
      t2.preventDefault();
      var e2 = t2.target.closest('[data-bs-toggle="button"]'), n2 = L(e2, "bs.button");
      n2 || (n2 = new F(e2)), n2.toggle();
    }), T("button", F);
    var X = {setDataAttribute: function(t2, e2, n2) {
      t2.setAttribute("data-bs-" + Y(e2), n2);
    }, removeDataAttribute: function(t2, e2) {
      t2.removeAttribute("data-bs-" + Y(e2));
    }, getDataAttributes: function(t2) {
      if (!t2)
        return {};
      var e2 = {};
      return Object.keys(t2.dataset).filter(function(t3) {
        return t3.startsWith("bs");
      }).forEach(function(n2) {
        var i2 = n2.replace(/^bs/, "");
        i2 = i2.charAt(0).toLowerCase() + i2.slice(1, i2.length), e2[i2] = z(t2.dataset[n2]);
      }), e2;
    }, getDataAttribute: function(t2, e2) {
      return z(t2.getAttribute("data-bs-" + Y(e2)));
    }, offset: function(t2) {
      var e2 = t2.getBoundingClientRect();
      return {top: e2.top + document.body.scrollTop, left: e2.left + document.body.scrollLeft};
    }, position: function(t2) {
      return {top: t2.offsetTop, left: t2.offsetLeft};
    }}, q = function(t2, e2) {
      var n2;
      return e2 === void 0 && (e2 = document.documentElement), (n2 = []).concat.apply(n2, Element.prototype.querySelectorAll.call(e2, t2));
    }, Q = function(t2, e2) {
      return e2 === void 0 && (e2 = document.documentElement), Element.prototype.querySelector.call(e2, t2);
    }, V = function(t2, e2) {
      var n2;
      return (n2 = []).concat.apply(n2, t2.children).filter(function(t3) {
        return t3.matches(e2);
      });
    }, $ = function(t2, e2) {
      for (var n2 = t2.previousElementSibling; n2; ) {
        if (n2.matches(e2))
          return [n2];
        n2 = n2.previousElementSibling;
      }
      return [];
    }, G = {interval: 5e3, keyboard: true, slide: false, pause: "hover", wrap: true, touch: true}, Z = {interval: "(number|boolean)", keyboard: "boolean", slide: "(boolean|string)", pause: "(string|boolean)", wrap: "boolean", touch: "boolean"}, J = function(t2) {
      function e2(e3, n3) {
        var i2;
        return (i2 = t2.call(this, e3) || this)._items = null, i2._interval = null, i2._activeElement = null, i2._isPaused = false, i2._isSliding = false, i2.touchTimeout = null, i2.touchStartX = 0, i2.touchDeltaX = 0, i2._config = i2._getConfig(n3), i2._indicatorsElement = Q(".carousel-indicators", i2._element), i2._touchSupported = "ontouchstart" in document.documentElement || navigator.maxTouchPoints > 0, i2._pointerEvent = Boolean(window.PointerEvent), i2._addEventListeners(), i2;
      }
      r(e2, t2);
      var n2 = e2.prototype;
      return n2.next = function() {
        this._isSliding || this._slide("next");
      }, n2.nextWhenVisible = function() {
        !document.hidden && v(this._element) && this.next();
      }, n2.prev = function() {
        this._isSliding || this._slide("prev");
      }, n2.pause = function(t3) {
        t3 || (this._isPaused = true), Q(".carousel-item-next, .carousel-item-prev", this._element) && (p(this._element), this.cycle(true)), clearInterval(this._interval), this._interval = null;
      }, n2.cycle = function(t3) {
        t3 || (this._isPaused = false), this._interval && (clearInterval(this._interval), this._interval = null), this._config && this._config.interval && !this._isPaused && (this._updateInterval(), this._interval = setInterval((document.visibilityState ? this.nextWhenVisible : this.next).bind(this), this._config.interval));
      }, n2.to = function(t3) {
        var e3 = this;
        this._activeElement = Q(".active.carousel-item", this._element);
        var n3 = this._getItemIndex(this._activeElement);
        if (!(t3 > this._items.length - 1 || t3 < 0))
          if (this._isSliding)
            K.one(this._element, "slid.bs.carousel", function() {
              return e3.to(t3);
            });
          else {
            if (n3 === t3)
              return this.pause(), void this.cycle();
            var i2 = t3 > n3 ? "next" : "prev";
            this._slide(i2, this._items[t3]);
          }
      }, n2.dispose = function() {
        t2.prototype.dispose.call(this), K.off(this._element, ".bs.carousel"), this._items = null, this._config = null, this._interval = null, this._isPaused = null, this._isSliding = null, this._activeElement = null, this._indicatorsElement = null;
      }, n2._getConfig = function(t3) {
        return t3 = s({}, G, t3), _("carousel", t3, Z), t3;
      }, n2._handleSwipe = function() {
        var t3 = Math.abs(this.touchDeltaX);
        if (!(t3 <= 40)) {
          var e3 = t3 / this.touchDeltaX;
          this.touchDeltaX = 0, e3 > 0 && (E ? this.next() : this.prev()), e3 < 0 && (E ? this.prev() : this.next());
        }
      }, n2._addEventListeners = function() {
        var t3 = this;
        this._config.keyboard && K.on(this._element, "keydown.bs.carousel", function(e3) {
          return t3._keydown(e3);
        }), this._config.pause === "hover" && (K.on(this._element, "mouseenter.bs.carousel", function(e3) {
          return t3.pause(e3);
        }), K.on(this._element, "mouseleave.bs.carousel", function(e3) {
          return t3.cycle(e3);
        })), this._config.touch && this._touchSupported && this._addTouchEventListeners();
      }, n2._addTouchEventListeners = function() {
        var t3 = this, e3 = function(e4) {
          !t3._pointerEvent || e4.pointerType !== "pen" && e4.pointerType !== "touch" ? t3._pointerEvent || (t3.touchStartX = e4.touches[0].clientX) : t3.touchStartX = e4.clientX;
        }, n3 = function(e4) {
          !t3._pointerEvent || e4.pointerType !== "pen" && e4.pointerType !== "touch" || (t3.touchDeltaX = e4.clientX - t3.touchStartX), t3._handleSwipe(), t3._config.pause === "hover" && (t3.pause(), t3.touchTimeout && clearTimeout(t3.touchTimeout), t3.touchTimeout = setTimeout(function(e5) {
            return t3.cycle(e5);
          }, 500 + t3._config.interval));
        };
        q(".carousel-item img", this._element).forEach(function(t4) {
          K.on(t4, "dragstart.bs.carousel", function(t5) {
            return t5.preventDefault();
          });
        }), this._pointerEvent ? (K.on(this._element, "pointerdown.bs.carousel", function(t4) {
          return e3(t4);
        }), K.on(this._element, "pointerup.bs.carousel", function(t4) {
          return n3(t4);
        }), this._element.classList.add("pointer-event")) : (K.on(this._element, "touchstart.bs.carousel", function(t4) {
          return e3(t4);
        }), K.on(this._element, "touchmove.bs.carousel", function(e4) {
          return function(e5) {
            e5.touches && e5.touches.length > 1 ? t3.touchDeltaX = 0 : t3.touchDeltaX = e5.touches[0].clientX - t3.touchStartX;
          }(e4);
        }), K.on(this._element, "touchend.bs.carousel", function(t4) {
          return n3(t4);
        }));
      }, n2._keydown = function(t3) {
        /input|textarea/i.test(t3.target.tagName) || (t3.key === "ArrowLeft" ? (t3.preventDefault(), E ? this.next() : this.prev()) : t3.key === "ArrowRight" && (t3.preventDefault(), E ? this.prev() : this.next()));
      }, n2._getItemIndex = function(t3) {
        return this._items = t3 && t3.parentNode ? q(".carousel-item", t3.parentNode) : [], this._items.indexOf(t3);
      }, n2._getItemByDirection = function(t3, e3) {
        var n3 = t3 === "next", i2 = t3 === "prev", o2 = this._getItemIndex(e3), s2 = this._items.length - 1;
        if ((i2 && o2 === 0 || n3 && o2 === s2) && !this._config.wrap)
          return e3;
        var r2 = (o2 + (t3 === "prev" ? -1 : 1)) % this._items.length;
        return r2 === -1 ? this._items[this._items.length - 1] : this._items[r2];
      }, n2._triggerSlideEvent = function(t3, e3) {
        var n3 = this._getItemIndex(t3), i2 = this._getItemIndex(Q(".active.carousel-item", this._element));
        return K.trigger(this._element, "slide.bs.carousel", {relatedTarget: t3, direction: e3, from: i2, to: n3});
      }, n2._setActiveIndicatorElement = function(t3) {
        if (this._indicatorsElement) {
          var e3 = Q(".active", this._indicatorsElement);
          e3.classList.remove("active"), e3.removeAttribute("aria-current");
          for (var n3 = q("[data-bs-target]", this._indicatorsElement), i2 = 0; i2 < n3.length; i2++)
            if (Number.parseInt(n3[i2].getAttribute("data-bs-slide-to"), 10) === this._getItemIndex(t3)) {
              n3[i2].classList.add("active"), n3[i2].setAttribute("aria-current", "true");
              break;
            }
        }
      }, n2._updateInterval = function() {
        var t3 = this._activeElement || Q(".active.carousel-item", this._element);
        if (t3) {
          var e3 = Number.parseInt(t3.getAttribute("data-bs-interval"), 10);
          e3 ? (this._config.defaultInterval = this._config.defaultInterval || this._config.interval, this._config.interval = e3) : this._config.interval = this._config.defaultInterval || this._config.interval;
        }
      }, n2._slide = function(t3, e3) {
        var n3 = this, i2 = Q(".active.carousel-item", this._element), o2 = this._getItemIndex(i2), s2 = e3 || i2 && this._getItemByDirection(t3, i2), r2 = this._getItemIndex(s2), a2 = Boolean(this._interval), l2 = t3 === "next" ? "carousel-item-start" : "carousel-item-end", c2 = t3 === "next" ? "carousel-item-next" : "carousel-item-prev", u2 = t3 === "next" ? "left" : "right";
        if (s2 && s2.classList.contains("active"))
          this._isSliding = false;
        else if (!this._triggerSlideEvent(s2, u2).defaultPrevented && i2 && s2) {
          if (this._isSliding = true, a2 && this.pause(), this._setActiveIndicatorElement(s2), this._activeElement = s2, this._element.classList.contains("slide")) {
            s2.classList.add(c2), y(s2), i2.classList.add(l2), s2.classList.add(l2);
            var h2 = f(i2);
            K.one(i2, "transitionend", function() {
              s2.classList.remove(l2, c2), s2.classList.add("active"), i2.classList.remove("active", c2, l2), n3._isSliding = false, setTimeout(function() {
                K.trigger(n3._element, "slid.bs.carousel", {relatedTarget: s2, direction: u2, from: o2, to: r2});
              }, 0);
            }), m(i2, h2);
          } else
            i2.classList.remove("active"), s2.classList.add("active"), this._isSliding = false, K.trigger(this._element, "slid.bs.carousel", {relatedTarget: s2, direction: u2, from: o2, to: r2});
          a2 && this.cycle();
        }
      }, e2.carouselInterface = function(t3, n3) {
        var i2 = L(t3, "bs.carousel"), o2 = s({}, G, X.getDataAttributes(t3));
        typeof n3 == "object" && (o2 = s({}, o2, n3));
        var r2 = typeof n3 == "string" ? n3 : o2.slide;
        if (i2 || (i2 = new e2(t3, o2)), typeof n3 == "number")
          i2.to(n3);
        else if (typeof r2 == "string") {
          if (i2[r2] === void 0)
            throw new TypeError('No method named "' + r2 + '"');
          i2[r2]();
        } else
          o2.interval && o2.ride && (i2.pause(), i2.cycle());
      }, e2.jQueryInterface = function(t3) {
        return this.each(function() {
          e2.carouselInterface(this, t3);
        });
      }, e2.dataApiClickHandler = function(t3) {
        var n3 = d(this);
        if (n3 && n3.classList.contains("carousel")) {
          var i2 = s({}, X.getDataAttributes(n3), X.getDataAttributes(this)), o2 = this.getAttribute("data-bs-slide-to");
          o2 && (i2.interval = false), e2.carouselInterface(n3, i2), o2 && L(n3, "bs.carousel").to(o2), t3.preventDefault();
        }
      }, o(e2, null, [{key: "Default", get: function() {
        return G;
      }}, {key: "DATA_KEY", get: function() {
        return "bs.carousel";
      }}]), e2;
    }(W);
    K.on(document, "click.bs.carousel.data-api", "[data-bs-slide], [data-bs-slide-to]", J.dataApiClickHandler), K.on(window, "load.bs.carousel.data-api", function() {
      for (var t2 = q('[data-bs-ride="carousel"]'), e2 = 0, n2 = t2.length; e2 < n2; e2++)
        J.carouselInterface(t2[e2], L(t2[e2], "bs.carousel"));
    }), T("carousel", J);
    var tt = {toggle: true, parent: ""}, et = {toggle: "boolean", parent: "(string|element)"}, nt = function(t2) {
      function e2(e3, n3) {
        var i2;
        (i2 = t2.call(this, e3) || this)._isTransitioning = false, i2._config = i2._getConfig(n3), i2._triggerArray = q('[data-bs-toggle="collapse"][href="#' + e3.id + '"],[data-bs-toggle="collapse"][data-bs-target="#' + e3.id + '"]');
        for (var o2 = q('[data-bs-toggle="collapse"]'), s2 = 0, r2 = o2.length; s2 < r2; s2++) {
          var a2 = o2[s2], l2 = h(a2), c2 = q(l2).filter(function(t3) {
            return t3 === e3;
          });
          l2 !== null && c2.length && (i2._selector = l2, i2._triggerArray.push(a2));
        }
        return i2._parent = i2._config.parent ? i2._getParent() : null, i2._config.parent || i2._addAriaAndCollapsedClass(i2._element, i2._triggerArray), i2._config.toggle && i2.toggle(), i2;
      }
      r(e2, t2);
      var n2 = e2.prototype;
      return n2.toggle = function() {
        this._element.classList.contains("show") ? this.hide() : this.show();
      }, n2.show = function() {
        var t3 = this;
        if (!this._isTransitioning && !this._element.classList.contains("show")) {
          var n3, i2;
          this._parent && (n3 = q(".show, .collapsing", this._parent).filter(function(e3) {
            return typeof t3._config.parent == "string" ? e3.getAttribute("data-bs-parent") === t3._config.parent : e3.classList.contains("collapse");
          })).length === 0 && (n3 = null);
          var o2 = Q(this._selector);
          if (n3) {
            var s2 = n3.find(function(t4) {
              return o2 !== t4;
            });
            if ((i2 = s2 ? L(s2, "bs.collapse") : null) && i2._isTransitioning)
              return;
          }
          if (!K.trigger(this._element, "show.bs.collapse").defaultPrevented) {
            n3 && n3.forEach(function(t4) {
              o2 !== t4 && e2.collapseInterface(t4, "hide"), i2 || k(t4, "bs.collapse", null);
            });
            var r2 = this._getDimension();
            this._element.classList.remove("collapse"), this._element.classList.add("collapsing"), this._element.style[r2] = 0, this._triggerArray.length && this._triggerArray.forEach(function(t4) {
              t4.classList.remove("collapsed"), t4.setAttribute("aria-expanded", true);
            }), this.setTransitioning(true);
            var a2 = "scroll" + (r2[0].toUpperCase() + r2.slice(1)), l2 = f(this._element);
            K.one(this._element, "transitionend", function() {
              t3._element.classList.remove("collapsing"), t3._element.classList.add("collapse", "show"), t3._element.style[r2] = "", t3.setTransitioning(false), K.trigger(t3._element, "shown.bs.collapse");
            }), m(this._element, l2), this._element.style[r2] = this._element[a2] + "px";
          }
        }
      }, n2.hide = function() {
        var t3 = this;
        if (!this._isTransitioning && this._element.classList.contains("show") && !K.trigger(this._element, "hide.bs.collapse").defaultPrevented) {
          var e3 = this._getDimension();
          this._element.style[e3] = this._element.getBoundingClientRect()[e3] + "px", y(this._element), this._element.classList.add("collapsing"), this._element.classList.remove("collapse", "show");
          var n3 = this._triggerArray.length;
          if (n3 > 0)
            for (var i2 = 0; i2 < n3; i2++) {
              var o2 = this._triggerArray[i2], s2 = d(o2);
              s2 && !s2.classList.contains("show") && (o2.classList.add("collapsed"), o2.setAttribute("aria-expanded", false));
            }
          this.setTransitioning(true), this._element.style[e3] = "";
          var r2 = f(this._element);
          K.one(this._element, "transitionend", function() {
            t3.setTransitioning(false), t3._element.classList.remove("collapsing"), t3._element.classList.add("collapse"), K.trigger(t3._element, "hidden.bs.collapse");
          }), m(this._element, r2);
        }
      }, n2.setTransitioning = function(t3) {
        this._isTransitioning = t3;
      }, n2.dispose = function() {
        t2.prototype.dispose.call(this), this._config = null, this._parent = null, this._triggerArray = null, this._isTransitioning = null;
      }, n2._getConfig = function(t3) {
        return (t3 = s({}, tt, t3)).toggle = Boolean(t3.toggle), _("collapse", t3, et), t3;
      }, n2._getDimension = function() {
        return this._element.classList.contains("width") ? "width" : "height";
      }, n2._getParent = function() {
        var t3 = this, e3 = this._config.parent;
        return g(e3) ? e3.jquery === void 0 && e3[0] === void 0 || (e3 = e3[0]) : e3 = Q(e3), q('[data-bs-toggle="collapse"][data-bs-parent="' + e3 + '"]', e3).forEach(function(e4) {
          var n3 = d(e4);
          t3._addAriaAndCollapsedClass(n3, [e4]);
        }), e3;
      }, n2._addAriaAndCollapsedClass = function(t3, e3) {
        if (t3 && e3.length) {
          var n3 = t3.classList.contains("show");
          e3.forEach(function(t4) {
            n3 ? t4.classList.remove("collapsed") : t4.classList.add("collapsed"), t4.setAttribute("aria-expanded", n3);
          });
        }
      }, e2.collapseInterface = function(t3, n3) {
        var i2 = L(t3, "bs.collapse"), o2 = s({}, tt, X.getDataAttributes(t3), typeof n3 == "object" && n3 ? n3 : {});
        if (!i2 && o2.toggle && typeof n3 == "string" && /show|hide/.test(n3) && (o2.toggle = false), i2 || (i2 = new e2(t3, o2)), typeof n3 == "string") {
          if (i2[n3] === void 0)
            throw new TypeError('No method named "' + n3 + '"');
          i2[n3]();
        }
      }, e2.jQueryInterface = function(t3) {
        return this.each(function() {
          e2.collapseInterface(this, t3);
        });
      }, o(e2, null, [{key: "Default", get: function() {
        return tt;
      }}, {key: "DATA_KEY", get: function() {
        return "bs.collapse";
      }}]), e2;
    }(W);
    K.on(document, "click.bs.collapse.data-api", '[data-bs-toggle="collapse"]', function(t2) {
      (t2.target.tagName === "A" || t2.delegateTarget && t2.delegateTarget.tagName === "A") && t2.preventDefault();
      var e2 = X.getDataAttributes(this), n2 = h(this);
      q(n2).forEach(function(t3) {
        var n3, i2 = L(t3, "bs.collapse");
        i2 ? (i2._parent === null && typeof e2.parent == "string" && (i2._config.parent = e2.parent, i2._parent = i2._getParent()), n3 = "toggle") : n3 = e2, nt.collapseInterface(t3, n3);
      });
    }), T("collapse", nt);
    var it = new RegExp("ArrowUp|ArrowDown|Escape"), ot = E ? "top-end" : "top-start", st = E ? "top-start" : "top-end", rt = E ? "bottom-end" : "bottom-start", at = E ? "bottom-start" : "bottom-end", lt = E ? "left-start" : "right-start", ct = E ? "right-start" : "left-start", ut = {offset: [0, 2], flip: true, boundary: "clippingParents", reference: "toggle", display: "dynamic", popperConfig: null}, ht = {offset: "(array|string|function)", flip: "boolean", boundary: "(string|element)", reference: "(string|element|object)", display: "string", popperConfig: "(null|object|function)"}, dt = function(e2) {
      function i2(t2, n2) {
        var i3;
        return (i3 = e2.call(this, t2) || this)._popper = null, i3._config = i3._getConfig(n2), i3._menu = i3._getMenuElement(), i3._inNavbar = i3._detectNavbar(), i3._addEventListeners(), i3;
      }
      r(i2, e2);
      var a2 = i2.prototype;
      return a2.toggle = function() {
        if (!this._element.disabled && !this._element.classList.contains("disabled")) {
          var t2 = this._element.classList.contains("show");
          i2.clearMenus(), t2 || this.show();
        }
      }, a2.show = function() {
        if (!(this._element.disabled || this._element.classList.contains("disabled") || this._menu.classList.contains("show"))) {
          var e3 = i2.getParentFromElement(this._element), o2 = {relatedTarget: this._element};
          if (!K.trigger(this._element, "show.bs.dropdown", o2).defaultPrevented) {
            if (this._inNavbar)
              X.setDataAttribute(this._menu, "popper", "none");
            else {
              if (n === void 0)
                throw new TypeError("Bootstrap's dropdowns require Popper (https://popper.js.org)");
              var s2 = this._element;
              this._config.reference === "parent" ? s2 = e3 : g(this._config.reference) ? (s2 = this._config.reference, this._config.reference.jquery !== void 0 && (s2 = this._config.reference[0])) : typeof this._config.reference == "object" && (s2 = this._config.reference);
              var r2 = this._getPopperConfig(), a3 = r2.modifiers.find(function(t2) {
                return t2.name === "applyStyles" && t2.enabled === false;
              });
              this._popper = t.createPopper(s2, this._menu, r2), a3 && X.setDataAttribute(this._menu, "popper", "static");
            }
            var l2;
            "ontouchstart" in document.documentElement && !e3.closest(".navbar-nav") && (l2 = []).concat.apply(l2, document.body.children).forEach(function(t2) {
              return K.on(t2, "mouseover", null, function() {
              });
            }), this._element.focus(), this._element.setAttribute("aria-expanded", true), this._menu.classList.toggle("show"), this._element.classList.toggle("show"), K.trigger(this._element, "shown.bs.dropdown", o2);
          }
        }
      }, a2.hide = function() {
        if (!this._element.disabled && !this._element.classList.contains("disabled") && this._menu.classList.contains("show")) {
          var t2 = {relatedTarget: this._element};
          K.trigger(this._element, "hide.bs.dropdown", t2).defaultPrevented || (this._popper && this._popper.destroy(), this._menu.classList.toggle("show"), this._element.classList.toggle("show"), X.removeDataAttribute(this._menu, "popper"), K.trigger(this._element, "hidden.bs.dropdown", t2));
        }
      }, a2.dispose = function() {
        e2.prototype.dispose.call(this), K.off(this._element, ".bs.dropdown"), this._menu = null, this._popper && (this._popper.destroy(), this._popper = null);
      }, a2.update = function() {
        this._inNavbar = this._detectNavbar(), this._popper && this._popper.update();
      }, a2._addEventListeners = function() {
        var t2 = this;
        K.on(this._element, "click.bs.dropdown", function(e3) {
          e3.preventDefault(), e3.stopPropagation(), t2.toggle();
        });
      }, a2._getConfig = function(t2) {
        if (t2 = s({}, this.constructor.Default, X.getDataAttributes(this._element), t2), _("dropdown", t2, this.constructor.DefaultType), typeof t2.reference == "object" && !g(t2.reference) && typeof t2.reference.getBoundingClientRect != "function")
          throw new TypeError("dropdown".toUpperCase() + ': Option "reference" provided type "object" without a required "getBoundingClientRect" method.');
        return t2;
      }, a2._getMenuElement = function() {
        return function(t2, e3) {
          for (var n2 = t2.nextElementSibling; n2; ) {
            if (n2.matches(e3))
              return [n2];
            n2 = n2.nextElementSibling;
          }
          return [];
        }(this._element, ".dropdown-menu")[0];
      }, a2._getPlacement = function() {
        var t2 = this._element.parentNode;
        if (t2.classList.contains("dropend"))
          return lt;
        if (t2.classList.contains("dropstart"))
          return ct;
        var e3 = getComputedStyle(this._menu).getPropertyValue("--bs-position").trim() === "end";
        return t2.classList.contains("dropup") ? e3 ? st : ot : e3 ? at : rt;
      }, a2._detectNavbar = function() {
        return this._element.closest(".navbar") !== null;
      }, a2._getOffset = function() {
        var t2 = this, e3 = this._config.offset;
        return typeof e3 == "string" ? e3.split(",").map(function(t3) {
          return Number.parseInt(t3, 10);
        }) : typeof e3 == "function" ? function(n2) {
          return e3(n2, t2._element);
        } : e3;
      }, a2._getPopperConfig = function() {
        var t2 = {placement: this._getPlacement(), modifiers: [{name: "preventOverflow", options: {altBoundary: this._config.flip, boundary: this._config.boundary}}, {name: "offset", options: {offset: this._getOffset()}}]};
        return this._config.display === "static" && (t2.modifiers = [{name: "applyStyles", enabled: false}]), s({}, t2, typeof this._config.popperConfig == "function" ? this._config.popperConfig(t2) : this._config.popperConfig);
      }, i2.dropdownInterface = function(t2, e3) {
        var n2 = L(t2, "bs.dropdown");
        if (n2 || (n2 = new i2(t2, typeof e3 == "object" ? e3 : null)), typeof e3 == "string") {
          if (n2[e3] === void 0)
            throw new TypeError('No method named "' + e3 + '"');
          n2[e3]();
        }
      }, i2.jQueryInterface = function(t2) {
        return this.each(function() {
          i2.dropdownInterface(this, t2);
        });
      }, i2.clearMenus = function(t2) {
        if (!t2 || t2.button !== 2 && (t2.type !== "keyup" || t2.key === "Tab"))
          for (var e3 = q('[data-bs-toggle="dropdown"]'), n2 = 0, i3 = e3.length; n2 < i3; n2++) {
            var o2 = L(e3[n2], "bs.dropdown"), s2 = {relatedTarget: e3[n2]};
            if (t2 && t2.type === "click" && (s2.clickEvent = t2), o2) {
              var r2, a3 = o2._menu;
              if (e3[n2].classList.contains("show") && !(t2 && (t2.type === "click" && /input|textarea/i.test(t2.target.tagName) || t2.type === "keyup" && t2.key === "Tab") && a3.contains(t2.target) || K.trigger(e3[n2], "hide.bs.dropdown", s2).defaultPrevented))
                "ontouchstart" in document.documentElement && (r2 = []).concat.apply(r2, document.body.children).forEach(function(t3) {
                  return K.off(t3, "mouseover", null, function() {
                  });
                }), e3[n2].setAttribute("aria-expanded", "false"), o2._popper && o2._popper.destroy(), a3.classList.remove("show"), e3[n2].classList.remove("show"), X.removeDataAttribute(a3, "popper"), K.trigger(e3[n2], "hidden.bs.dropdown", s2);
            }
          }
      }, i2.getParentFromElement = function(t2) {
        return d(t2) || t2.parentNode;
      }, i2.dataApiKeydownHandler = function(t2) {
        if (!(/input|textarea/i.test(t2.target.tagName) ? t2.key === "Space" || t2.key !== "Escape" && (t2.key !== "ArrowDown" && t2.key !== "ArrowUp" || t2.target.closest(".dropdown-menu")) : !it.test(t2.key)) && (t2.preventDefault(), t2.stopPropagation(), !this.disabled && !this.classList.contains("disabled"))) {
          var e3 = i2.getParentFromElement(this), n2 = this.classList.contains("show");
          if (t2.key === "Escape")
            return (this.matches('[data-bs-toggle="dropdown"]') ? this : $(this, '[data-bs-toggle="dropdown"]')[0]).focus(), void i2.clearMenus();
          if (n2 || t2.key !== "ArrowUp" && t2.key !== "ArrowDown")
            if (n2 && t2.key !== "Space") {
              var o2 = q(".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)", e3).filter(v);
              if (o2.length) {
                var s2 = o2.indexOf(t2.target);
                t2.key === "ArrowUp" && s2 > 0 && s2--, t2.key === "ArrowDown" && s2 < o2.length - 1 && s2++, o2[s2 = s2 === -1 ? 0 : s2].focus();
              }
            } else
              i2.clearMenus();
          else
            (this.matches('[data-bs-toggle="dropdown"]') ? this : $(this, '[data-bs-toggle="dropdown"]')[0]).click();
        }
      }, o(i2, null, [{key: "Default", get: function() {
        return ut;
      }}, {key: "DefaultType", get: function() {
        return ht;
      }}, {key: "DATA_KEY", get: function() {
        return "bs.dropdown";
      }}]), i2;
    }(W);
    K.on(document, "keydown.bs.dropdown.data-api", '[data-bs-toggle="dropdown"]', dt.dataApiKeydownHandler), K.on(document, "keydown.bs.dropdown.data-api", ".dropdown-menu", dt.dataApiKeydownHandler), K.on(document, "click.bs.dropdown.data-api", dt.clearMenus), K.on(document, "keyup.bs.dropdown.data-api", dt.clearMenus), K.on(document, "click.bs.dropdown.data-api", '[data-bs-toggle="dropdown"]', function(t2) {
      t2.preventDefault(), t2.stopPropagation(), dt.dropdownInterface(this, "toggle");
    }), K.on(document, "click.bs.dropdown.data-api", ".dropdown form", function(t2) {
      return t2.stopPropagation();
    }), T("dropdown", dt);
    var ft = {backdrop: true, keyboard: true, focus: true}, pt = {backdrop: "(boolean|string)", keyboard: "boolean", focus: "boolean"}, gt = function(t2) {
      function e2(e3, n3) {
        var i2;
        return (i2 = t2.call(this, e3) || this)._config = i2._getConfig(n3), i2._dialog = Q(".modal-dialog", e3), i2._backdrop = null, i2._isShown = false, i2._isBodyOverflowing = false, i2._ignoreBackdropClick = false, i2._isTransitioning = false, i2._scrollbarWidth = 0, i2;
      }
      r(e2, t2);
      var n2 = e2.prototype;
      return n2.toggle = function(t3) {
        return this._isShown ? this.hide() : this.show(t3);
      }, n2.show = function(t3) {
        var e3 = this;
        if (!this._isShown && !this._isTransitioning) {
          this._element.classList.contains("fade") && (this._isTransitioning = true);
          var n3 = K.trigger(this._element, "show.bs.modal", {relatedTarget: t3});
          this._isShown || n3.defaultPrevented || (this._isShown = true, this._checkScrollbar(), this._setScrollbar(), this._adjustDialog(), this._setEscapeEvent(), this._setResizeEvent(), K.on(this._element, "click.dismiss.bs.modal", '[data-bs-dismiss="modal"]', function(t4) {
            return e3.hide(t4);
          }), K.on(this._dialog, "mousedown.dismiss.bs.modal", function() {
            K.one(e3._element, "mouseup.dismiss.bs.modal", function(t4) {
              t4.target === e3._element && (e3._ignoreBackdropClick = true);
            });
          }), this._showBackdrop(function() {
            return e3._showElement(t3);
          }));
        }
      }, n2.hide = function(t3) {
        var e3 = this;
        if (t3 && t3.preventDefault(), this._isShown && !this._isTransitioning && !K.trigger(this._element, "hide.bs.modal").defaultPrevented) {
          this._isShown = false;
          var n3 = this._element.classList.contains("fade");
          if (n3 && (this._isTransitioning = true), this._setEscapeEvent(), this._setResizeEvent(), K.off(document, "focusin.bs.modal"), this._element.classList.remove("show"), K.off(this._element, "click.dismiss.bs.modal"), K.off(this._dialog, "mousedown.dismiss.bs.modal"), n3) {
            var i2 = f(this._element);
            K.one(this._element, "transitionend", function(t4) {
              return e3._hideModal(t4);
            }), m(this._element, i2);
          } else
            this._hideModal();
        }
      }, n2.dispose = function() {
        [window, this._element, this._dialog].forEach(function(t3) {
          return K.off(t3, ".bs.modal");
        }), t2.prototype.dispose.call(this), K.off(document, "focusin.bs.modal"), this._config = null, this._dialog = null, this._backdrop = null, this._isShown = null, this._isBodyOverflowing = null, this._ignoreBackdropClick = null, this._isTransitioning = null, this._scrollbarWidth = null;
      }, n2.handleUpdate = function() {
        this._adjustDialog();
      }, n2._getConfig = function(t3) {
        return t3 = s({}, ft, t3), _("modal", t3, pt), t3;
      }, n2._showElement = function(t3) {
        var e3 = this, n3 = this._element.classList.contains("fade"), i2 = Q(".modal-body", this._dialog);
        this._element.parentNode && this._element.parentNode.nodeType === Node.ELEMENT_NODE || document.body.appendChild(this._element), this._element.style.display = "block", this._element.removeAttribute("aria-hidden"), this._element.setAttribute("aria-modal", true), this._element.setAttribute("role", "dialog"), this._element.scrollTop = 0, i2 && (i2.scrollTop = 0), n3 && y(this._element), this._element.classList.add("show"), this._config.focus && this._enforceFocus();
        var o2 = function() {
          e3._config.focus && e3._element.focus(), e3._isTransitioning = false, K.trigger(e3._element, "shown.bs.modal", {relatedTarget: t3});
        };
        if (n3) {
          var s2 = f(this._dialog);
          K.one(this._dialog, "transitionend", o2), m(this._dialog, s2);
        } else
          o2();
      }, n2._enforceFocus = function() {
        var t3 = this;
        K.off(document, "focusin.bs.modal"), K.on(document, "focusin.bs.modal", function(e3) {
          document === e3.target || t3._element === e3.target || t3._element.contains(e3.target) || t3._element.focus();
        });
      }, n2._setEscapeEvent = function() {
        var t3 = this;
        this._isShown ? K.on(this._element, "keydown.dismiss.bs.modal", function(e3) {
          t3._config.keyboard && e3.key === "Escape" ? (e3.preventDefault(), t3.hide()) : t3._config.keyboard || e3.key !== "Escape" || t3._triggerBackdropTransition();
        }) : K.off(this._element, "keydown.dismiss.bs.modal");
      }, n2._setResizeEvent = function() {
        var t3 = this;
        this._isShown ? K.on(window, "resize.bs.modal", function() {
          return t3._adjustDialog();
        }) : K.off(window, "resize.bs.modal");
      }, n2._hideModal = function() {
        var t3 = this;
        this._element.style.display = "none", this._element.setAttribute("aria-hidden", true), this._element.removeAttribute("aria-modal"), this._element.removeAttribute("role"), this._isTransitioning = false, this._showBackdrop(function() {
          document.body.classList.remove("modal-open"), t3._resetAdjustments(), t3._resetScrollbar(), K.trigger(t3._element, "hidden.bs.modal");
        });
      }, n2._removeBackdrop = function() {
        this._backdrop.parentNode.removeChild(this._backdrop), this._backdrop = null;
      }, n2._showBackdrop = function(t3) {
        var e3 = this, n3 = this._element.classList.contains("fade") ? "fade" : "";
        if (this._isShown && this._config.backdrop) {
          if (this._backdrop = document.createElement("div"), this._backdrop.className = "modal-backdrop", n3 && this._backdrop.classList.add(n3), document.body.appendChild(this._backdrop), K.on(this._element, "click.dismiss.bs.modal", function(t4) {
            e3._ignoreBackdropClick ? e3._ignoreBackdropClick = false : t4.target === t4.currentTarget && (e3._config.backdrop === "static" ? e3._triggerBackdropTransition() : e3.hide());
          }), n3 && y(this._backdrop), this._backdrop.classList.add("show"), !n3)
            return void t3();
          var i2 = f(this._backdrop);
          K.one(this._backdrop, "transitionend", t3), m(this._backdrop, i2);
        } else if (!this._isShown && this._backdrop) {
          this._backdrop.classList.remove("show");
          var o2 = function() {
            e3._removeBackdrop(), t3();
          };
          if (this._element.classList.contains("fade")) {
            var s2 = f(this._backdrop);
            K.one(this._backdrop, "transitionend", o2), m(this._backdrop, s2);
          } else
            o2();
        } else
          t3();
      }, n2._triggerBackdropTransition = function() {
        var t3 = this;
        if (!K.trigger(this._element, "hidePrevented.bs.modal").defaultPrevented) {
          var e3 = this._element.scrollHeight > document.documentElement.clientHeight;
          e3 || (this._element.style.overflowY = "hidden"), this._element.classList.add("modal-static");
          var n3 = f(this._dialog);
          K.off(this._element, "transitionend"), K.one(this._element, "transitionend", function() {
            t3._element.classList.remove("modal-static"), e3 || (K.one(t3._element, "transitionend", function() {
              t3._element.style.overflowY = "";
            }), m(t3._element, n3));
          }), m(this._element, n3), this._element.focus();
        }
      }, n2._adjustDialog = function() {
        var t3 = this._element.scrollHeight > document.documentElement.clientHeight;
        (!this._isBodyOverflowing && t3 && !E || this._isBodyOverflowing && !t3 && E) && (this._element.style.paddingLeft = this._scrollbarWidth + "px"), (this._isBodyOverflowing && !t3 && !E || !this._isBodyOverflowing && t3 && E) && (this._element.style.paddingRight = this._scrollbarWidth + "px");
      }, n2._resetAdjustments = function() {
        this._element.style.paddingLeft = "", this._element.style.paddingRight = "";
      }, n2._checkScrollbar = function() {
        var t3 = document.body.getBoundingClientRect();
        this._isBodyOverflowing = Math.round(t3.left + t3.right) < window.innerWidth, this._scrollbarWidth = this._getScrollbarWidth();
      }, n2._setScrollbar = function() {
        var t3 = this;
        this._isBodyOverflowing && (this._setElementAttributes(".fixed-top, .fixed-bottom, .is-fixed, .sticky-top", "paddingRight", function(e3) {
          return e3 + t3._scrollbarWidth;
        }), this._setElementAttributes(".sticky-top", "marginRight", function(e3) {
          return e3 - t3._scrollbarWidth;
        }), this._setElementAttributes("body", "paddingRight", function(e3) {
          return e3 + t3._scrollbarWidth;
        })), document.body.classList.add("modal-open");
      }, n2._setElementAttributes = function(t3, e3, n3) {
        q(t3).forEach(function(t4) {
          var i2 = t4.style[e3], o2 = window.getComputedStyle(t4)[e3];
          X.setDataAttribute(t4, e3, i2), t4.style[e3] = n3(Number.parseFloat(o2)) + "px";
        });
      }, n2._resetScrollbar = function() {
        this._resetElementAttributes(".fixed-top, .fixed-bottom, .is-fixed, .sticky-top", "paddingRight"), this._resetElementAttributes(".sticky-top", "marginRight"), this._resetElementAttributes("body", "paddingRight");
      }, n2._resetElementAttributes = function(t3, e3) {
        q(t3).forEach(function(t4) {
          var n3 = X.getDataAttribute(t4, e3);
          n3 === void 0 && t4 === document.body ? t4.style[e3] = "" : (X.removeDataAttribute(t4, e3), t4.style[e3] = n3);
        });
      }, n2._getScrollbarWidth = function() {
        var t3 = document.createElement("div");
        t3.className = "modal-scrollbar-measure", document.body.appendChild(t3);
        var e3 = t3.getBoundingClientRect().width - t3.clientWidth;
        return document.body.removeChild(t3), e3;
      }, e2.jQueryInterface = function(t3, n3) {
        return this.each(function() {
          var i2 = L(this, "bs.modal"), o2 = s({}, ft, X.getDataAttributes(this), typeof t3 == "object" && t3 ? t3 : {});
          if (i2 || (i2 = new e2(this, o2)), typeof t3 == "string") {
            if (i2[t3] === void 0)
              throw new TypeError('No method named "' + t3 + '"');
            i2[t3](n3);
          }
        });
      }, o(e2, null, [{key: "Default", get: function() {
        return ft;
      }}, {key: "DATA_KEY", get: function() {
        return "bs.modal";
      }}]), e2;
    }(W);
    K.on(document, "click.bs.modal.data-api", '[data-bs-toggle="modal"]', function(t2) {
      var e2 = this, n2 = d(this);
      this.tagName !== "A" && this.tagName !== "AREA" || t2.preventDefault(), K.one(n2, "show.bs.modal", function(t3) {
        t3.defaultPrevented || K.one(n2, "hidden.bs.modal", function() {
          v(e2) && e2.focus();
        });
      });
      var i2 = L(n2, "bs.modal");
      if (!i2) {
        var o2 = s({}, X.getDataAttributes(n2), X.getDataAttributes(this));
        i2 = new gt(n2, o2);
      }
      i2.toggle(this);
    }), T("modal", gt);
    var mt = new Set(["background", "cite", "href", "itemtype", "longdesc", "poster", "src", "xlink:href"]), _t = /^(?:(?:https?|mailto|ftp|tel|file):|[^#&/:?]*(?:[#/?]|$))/gi, vt = /^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[\d+/a-z]+=*$/i;
    function bt(t2, e2, n2) {
      var i2;
      if (!t2.length)
        return t2;
      if (n2 && typeof n2 == "function")
        return n2(t2);
      for (var o2 = new window.DOMParser().parseFromString(t2, "text/html"), s2 = Object.keys(e2), r2 = (i2 = []).concat.apply(i2, o2.body.querySelectorAll("*")), a2 = function(t3, n3) {
        var i3, o3 = r2[t3], a3 = o3.nodeName.toLowerCase();
        if (!s2.includes(a3))
          return o3.parentNode.removeChild(o3), "continue";
        var l3 = (i3 = []).concat.apply(i3, o3.attributes), c3 = [].concat(e2["*"] || [], e2[a3] || []);
        l3.forEach(function(t4) {
          (function(t5, e3) {
            var n4 = t5.nodeName.toLowerCase();
            if (e3.includes(n4))
              return !mt.has(n4) || Boolean(_t.test(t5.nodeValue) || vt.test(t5.nodeValue));
            for (var i4 = e3.filter(function(t6) {
              return t6 instanceof RegExp;
            }), o4 = 0, s3 = i4.length; o4 < s3; o4++)
              if (i4[o4].test(n4))
                return true;
            return false;
          })(t4, c3) || o3.removeAttribute(t4.nodeName);
        });
      }, l2 = 0, c2 = r2.length; l2 < c2; l2++)
        a2(l2);
      return o2.body.innerHTML;
    }
    var yt = new RegExp("(^|\\s)bs-tooltip\\S+", "g"), wt = new Set(["sanitize", "allowList", "sanitizeFn"]), Et = {animation: "boolean", template: "string", title: "(string|element|function)", trigger: "string", delay: "(number|object)", html: "boolean", selector: "(string|boolean)", placement: "(string|function)", offset: "(array|string|function)", container: "(string|element|boolean)", fallbackPlacements: "array", boundary: "(string|element)", customClass: "(string|function)", sanitize: "boolean", sanitizeFn: "(null|function)", allowList: "object", popperConfig: "(null|object|function)"}, Tt = {AUTO: "auto", TOP: "top", RIGHT: E ? "left" : "right", BOTTOM: "bottom", LEFT: E ? "right" : "left"}, At = {animation: true, template: '<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>', trigger: "hover focus", title: "", delay: 0, html: false, selector: false, placement: "top", offset: [0, 0], container: false, fallbackPlacements: ["top", "right", "bottom", "left"], boundary: "clippingParents", customClass: "", sanitize: true, sanitizeFn: null, allowList: {"*": ["class", "dir", "id", "lang", "role", /^aria-[\w-]*$/i], a: ["target", "href", "title", "rel"], area: [], b: [], br: [], col: [], code: [], div: [], em: [], hr: [], h1: [], h2: [], h3: [], h4: [], h5: [], h6: [], i: [], img: ["src", "srcset", "alt", "title", "width", "height"], li: [], ol: [], p: [], pre: [], s: [], small: [], span: [], sub: [], sup: [], strong: [], u: [], ul: []}, popperConfig: null}, kt = {HIDE: "hide.bs.tooltip", HIDDEN: "hidden.bs.tooltip", SHOW: "show.bs.tooltip", SHOWN: "shown.bs.tooltip", INSERTED: "inserted.bs.tooltip", CLICK: "click.bs.tooltip", FOCUSIN: "focusin.bs.tooltip", FOCUSOUT: "focusout.bs.tooltip", MOUSEENTER: "mouseenter.bs.tooltip", MOUSELEAVE: "mouseleave.bs.tooltip"}, Lt = function(e2) {
      function i2(t2, i3) {
        var o2;
        if (n === void 0)
          throw new TypeError("Bootstrap's tooltips require Popper (https://popper.js.org)");
        return (o2 = e2.call(this, t2) || this)._isEnabled = true, o2._timeout = 0, o2._hoverState = "", o2._activeTrigger = {}, o2._popper = null, o2.config = o2._getConfig(i3), o2.tip = null, o2._setListeners(), o2;
      }
      r(i2, e2);
      var a2 = i2.prototype;
      return a2.enable = function() {
        this._isEnabled = true;
      }, a2.disable = function() {
        this._isEnabled = false;
      }, a2.toggleEnabled = function() {
        this._isEnabled = !this._isEnabled;
      }, a2.toggle = function(t2) {
        if (this._isEnabled)
          if (t2) {
            var e3 = this._initializeOnDelegatedTarget(t2);
            e3._activeTrigger.click = !e3._activeTrigger.click, e3._isWithActiveTrigger() ? e3._enter(null, e3) : e3._leave(null, e3);
          } else {
            if (this.getTipElement().classList.contains("show"))
              return void this._leave(null, this);
            this._enter(null, this);
          }
      }, a2.dispose = function() {
        clearTimeout(this._timeout), K.off(this._element, this.constructor.EVENT_KEY), K.off(this._element.closest(".modal"), "hide.bs.modal", this._hideModalHandler), this.tip && this.tip.parentNode && this.tip.parentNode.removeChild(this.tip), this._isEnabled = null, this._timeout = null, this._hoverState = null, this._activeTrigger = null, this._popper && this._popper.destroy(), this._popper = null, this.config = null, this.tip = null, e2.prototype.dispose.call(this);
      }, a2.show = function() {
        var e3 = this;
        if (this._element.style.display === "none")
          throw new Error("Please use show on visible elements");
        if (this.isWithContent() && this._isEnabled) {
          var n2 = K.trigger(this._element, this.constructor.Event.SHOW), i3 = function t2(e4) {
            if (!document.documentElement.attachShadow)
              return null;
            if (typeof e4.getRootNode == "function") {
              var n3 = e4.getRootNode();
              return n3 instanceof ShadowRoot ? n3 : null;
            }
            return e4 instanceof ShadowRoot ? e4 : e4.parentNode ? t2(e4.parentNode) : null;
          }(this._element), o2 = i3 === null ? this._element.ownerDocument.documentElement.contains(this._element) : i3.contains(this._element);
          if (!n2.defaultPrevented && o2) {
            var s2 = this.getTipElement(), r2 = c(this.constructor.NAME);
            s2.setAttribute("id", r2), this._element.setAttribute("aria-describedby", r2), this.setContent(), this.config.animation && s2.classList.add("fade");
            var a3 = typeof this.config.placement == "function" ? this.config.placement.call(this, s2, this._element) : this.config.placement, l2 = this._getAttachment(a3);
            this._addAttachmentClass(l2);
            var u2 = this._getContainer();
            k(s2, this.constructor.DATA_KEY, this), this._element.ownerDocument.documentElement.contains(this.tip) || u2.appendChild(s2), K.trigger(this._element, this.constructor.Event.INSERTED), this._popper = t.createPopper(this._element, s2, this._getPopperConfig(l2)), s2.classList.add("show");
            var h2, d2, p2 = typeof this.config.customClass == "function" ? this.config.customClass() : this.config.customClass;
            p2 && (h2 = s2.classList).add.apply(h2, p2.split(" ")), "ontouchstart" in document.documentElement && (d2 = []).concat.apply(d2, document.body.children).forEach(function(t2) {
              K.on(t2, "mouseover", function() {
              });
            });
            var g2 = function() {
              var t2 = e3._hoverState;
              e3._hoverState = null, K.trigger(e3._element, e3.constructor.Event.SHOWN), t2 === "out" && e3._leave(null, e3);
            };
            if (this.tip.classList.contains("fade")) {
              var _2 = f(this.tip);
              K.one(this.tip, "transitionend", g2), m(this.tip, _2);
            } else
              g2();
          }
        }
      }, a2.hide = function() {
        var t2 = this;
        if (this._popper) {
          var e3 = this.getTipElement(), n2 = function() {
            t2._hoverState !== "show" && e3.parentNode && e3.parentNode.removeChild(e3), t2._cleanTipClass(), t2._element.removeAttribute("aria-describedby"), K.trigger(t2._element, t2.constructor.Event.HIDDEN), t2._popper && (t2._popper.destroy(), t2._popper = null);
          };
          if (!K.trigger(this._element, this.constructor.Event.HIDE).defaultPrevented) {
            var i3;
            if (e3.classList.remove("show"), "ontouchstart" in document.documentElement && (i3 = []).concat.apply(i3, document.body.children).forEach(function(t3) {
              return K.off(t3, "mouseover", b);
            }), this._activeTrigger.click = false, this._activeTrigger.focus = false, this._activeTrigger.hover = false, this.tip.classList.contains("fade")) {
              var o2 = f(e3);
              K.one(e3, "transitionend", n2), m(e3, o2);
            } else
              n2();
            this._hoverState = "";
          }
        }
      }, a2.update = function() {
        this._popper !== null && this._popper.update();
      }, a2.isWithContent = function() {
        return Boolean(this.getTitle());
      }, a2.getTipElement = function() {
        if (this.tip)
          return this.tip;
        var t2 = document.createElement("div");
        return t2.innerHTML = this.config.template, this.tip = t2.children[0], this.tip;
      }, a2.setContent = function() {
        var t2 = this.getTipElement();
        this.setElementContent(Q(".tooltip-inner", t2), this.getTitle()), t2.classList.remove("fade", "show");
      }, a2.setElementContent = function(t2, e3) {
        if (t2 !== null)
          return typeof e3 == "object" && g(e3) ? (e3.jquery && (e3 = e3[0]), void (this.config.html ? e3.parentNode !== t2 && (t2.innerHTML = "", t2.appendChild(e3)) : t2.textContent = e3.textContent)) : void (this.config.html ? (this.config.sanitize && (e3 = bt(e3, this.config.allowList, this.config.sanitizeFn)), t2.innerHTML = e3) : t2.textContent = e3);
      }, a2.getTitle = function() {
        var t2 = this._element.getAttribute("data-bs-original-title");
        return t2 || (t2 = typeof this.config.title == "function" ? this.config.title.call(this._element) : this.config.title), t2;
      }, a2.updateAttachment = function(t2) {
        return t2 === "right" ? "end" : t2 === "left" ? "start" : t2;
      }, a2._initializeOnDelegatedTarget = function(t2, e3) {
        var n2 = this.constructor.DATA_KEY;
        return (e3 = e3 || L(t2.delegateTarget, n2)) || (e3 = new this.constructor(t2.delegateTarget, this._getDelegateConfig()), k(t2.delegateTarget, n2, e3)), e3;
      }, a2._getOffset = function() {
        var t2 = this, e3 = this.config.offset;
        return typeof e3 == "string" ? e3.split(",").map(function(t3) {
          return Number.parseInt(t3, 10);
        }) : typeof e3 == "function" ? function(n2) {
          return e3(n2, t2._element);
        } : e3;
      }, a2._getPopperConfig = function(t2) {
        var e3 = this, n2 = {placement: t2, modifiers: [{name: "flip", options: {altBoundary: true, fallbackPlacements: this.config.fallbackPlacements}}, {name: "offset", options: {offset: this._getOffset()}}, {name: "preventOverflow", options: {boundary: this.config.boundary}}, {name: "arrow", options: {element: "." + this.constructor.NAME + "-arrow"}}, {name: "onChange", enabled: true, phase: "afterWrite", fn: function(t3) {
          return e3._handlePopperPlacementChange(t3);
        }}], onFirstUpdate: function(t3) {
          t3.options.placement !== t3.placement && e3._handlePopperPlacementChange(t3);
        }};
        return s({}, n2, typeof this.config.popperConfig == "function" ? this.config.popperConfig(n2) : this.config.popperConfig);
      }, a2._addAttachmentClass = function(t2) {
        this.getTipElement().classList.add("bs-tooltip-" + this.updateAttachment(t2));
      }, a2._getContainer = function() {
        return this.config.container === false ? document.body : g(this.config.container) ? this.config.container : Q(this.config.container);
      }, a2._getAttachment = function(t2) {
        return Tt[t2.toUpperCase()];
      }, a2._setListeners = function() {
        var t2 = this;
        this.config.trigger.split(" ").forEach(function(e3) {
          if (e3 === "click")
            K.on(t2._element, t2.constructor.Event.CLICK, t2.config.selector, function(e4) {
              return t2.toggle(e4);
            });
          else if (e3 !== "manual") {
            var n2 = e3 === "hover" ? t2.constructor.Event.MOUSEENTER : t2.constructor.Event.FOCUSIN, i3 = e3 === "hover" ? t2.constructor.Event.MOUSELEAVE : t2.constructor.Event.FOCUSOUT;
            K.on(t2._element, n2, t2.config.selector, function(e4) {
              return t2._enter(e4);
            }), K.on(t2._element, i3, t2.config.selector, function(e4) {
              return t2._leave(e4);
            });
          }
        }), this._hideModalHandler = function() {
          t2._element && t2.hide();
        }, K.on(this._element.closest(".modal"), "hide.bs.modal", this._hideModalHandler), this.config.selector ? this.config = s({}, this.config, {trigger: "manual", selector: ""}) : this._fixTitle();
      }, a2._fixTitle = function() {
        var t2 = this._element.getAttribute("title"), e3 = typeof this._element.getAttribute("data-bs-original-title");
        (t2 || e3 !== "string") && (this._element.setAttribute("data-bs-original-title", t2 || ""), !t2 || this._element.getAttribute("aria-label") || this._element.textContent || this._element.setAttribute("aria-label", t2), this._element.setAttribute("title", ""));
      }, a2._enter = function(t2, e3) {
        e3 = this._initializeOnDelegatedTarget(t2, e3), t2 && (e3._activeTrigger[t2.type === "focusin" ? "focus" : "hover"] = true), e3.getTipElement().classList.contains("show") || e3._hoverState === "show" ? e3._hoverState = "show" : (clearTimeout(e3._timeout), e3._hoverState = "show", e3.config.delay && e3.config.delay.show ? e3._timeout = setTimeout(function() {
          e3._hoverState === "show" && e3.show();
        }, e3.config.delay.show) : e3.show());
      }, a2._leave = function(t2, e3) {
        e3 = this._initializeOnDelegatedTarget(t2, e3), t2 && (e3._activeTrigger[t2.type === "focusout" ? "focus" : "hover"] = false), e3._isWithActiveTrigger() || (clearTimeout(e3._timeout), e3._hoverState = "out", e3.config.delay && e3.config.delay.hide ? e3._timeout = setTimeout(function() {
          e3._hoverState === "out" && e3.hide();
        }, e3.config.delay.hide) : e3.hide());
      }, a2._isWithActiveTrigger = function() {
        for (var t2 in this._activeTrigger)
          if (this._activeTrigger[t2])
            return true;
        return false;
      }, a2._getConfig = function(t2) {
        var e3 = X.getDataAttributes(this._element);
        return Object.keys(e3).forEach(function(t3) {
          wt.has(t3) && delete e3[t3];
        }), t2 && typeof t2.container == "object" && t2.container.jquery && (t2.container = t2.container[0]), typeof (t2 = s({}, this.constructor.Default, e3, typeof t2 == "object" && t2 ? t2 : {})).delay == "number" && (t2.delay = {show: t2.delay, hide: t2.delay}), typeof t2.title == "number" && (t2.title = t2.title.toString()), typeof t2.content == "number" && (t2.content = t2.content.toString()), _("tooltip", t2, this.constructor.DefaultType), t2.sanitize && (t2.template = bt(t2.template, t2.allowList, t2.sanitizeFn)), t2;
      }, a2._getDelegateConfig = function() {
        var t2 = {};
        if (this.config)
          for (var e3 in this.config)
            this.constructor.Default[e3] !== this.config[e3] && (t2[e3] = this.config[e3]);
        return t2;
      }, a2._cleanTipClass = function() {
        var t2 = this.getTipElement(), e3 = t2.getAttribute("class").match(yt);
        e3 !== null && e3.length > 0 && e3.map(function(t3) {
          return t3.trim();
        }).forEach(function(e4) {
          return t2.classList.remove(e4);
        });
      }, a2._handlePopperPlacementChange = function(t2) {
        var e3 = t2.state;
        e3 && (this.tip = e3.elements.popper, this._cleanTipClass(), this._addAttachmentClass(this._getAttachment(e3.placement)));
      }, i2.jQueryInterface = function(t2) {
        return this.each(function() {
          var e3 = L(this, "bs.tooltip"), n2 = typeof t2 == "object" && t2;
          if ((e3 || !/dispose|hide/.test(t2)) && (e3 || (e3 = new i2(this, n2)), typeof t2 == "string")) {
            if (e3[t2] === void 0)
              throw new TypeError('No method named "' + t2 + '"');
            e3[t2]();
          }
        });
      }, o(i2, null, [{key: "Default", get: function() {
        return At;
      }}, {key: "NAME", get: function() {
        return "tooltip";
      }}, {key: "DATA_KEY", get: function() {
        return "bs.tooltip";
      }}, {key: "Event", get: function() {
        return kt;
      }}, {key: "EVENT_KEY", get: function() {
        return ".bs.tooltip";
      }}, {key: "DefaultType", get: function() {
        return Et;
      }}]), i2;
    }(W);
    T("tooltip", Lt);
    var Ct = new RegExp("(^|\\s)bs-popover\\S+", "g"), Dt = s({}, Lt.Default, {placement: "right", offset: [0, 8], trigger: "click", content: "", template: '<div class="popover" role="tooltip"><div class="popover-arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'}), St = s({}, Lt.DefaultType, {content: "(string|element|function)"}), Nt = {HIDE: "hide.bs.popover", HIDDEN: "hidden.bs.popover", SHOW: "show.bs.popover", SHOWN: "shown.bs.popover", INSERTED: "inserted.bs.popover", CLICK: "click.bs.popover", FOCUSIN: "focusin.bs.popover", FOCUSOUT: "focusout.bs.popover", MOUSEENTER: "mouseenter.bs.popover", MOUSELEAVE: "mouseleave.bs.popover"}, Ot = function(t2) {
      function e2() {
        return t2.apply(this, arguments) || this;
      }
      r(e2, t2);
      var n2 = e2.prototype;
      return n2.isWithContent = function() {
        return this.getTitle() || this._getContent();
      }, n2.setContent = function() {
        var t3 = this.getTipElement();
        this.setElementContent(Q(".popover-header", t3), this.getTitle());
        var e3 = this._getContent();
        typeof e3 == "function" && (e3 = e3.call(this._element)), this.setElementContent(Q(".popover-body", t3), e3), t3.classList.remove("fade", "show");
      }, n2._addAttachmentClass = function(t3) {
        this.getTipElement().classList.add("bs-popover-" + this.updateAttachment(t3));
      }, n2._getContent = function() {
        return this._element.getAttribute("data-bs-content") || this.config.content;
      }, n2._cleanTipClass = function() {
        var t3 = this.getTipElement(), e3 = t3.getAttribute("class").match(Ct);
        e3 !== null && e3.length > 0 && e3.map(function(t4) {
          return t4.trim();
        }).forEach(function(e4) {
          return t3.classList.remove(e4);
        });
      }, e2.jQueryInterface = function(t3) {
        return this.each(function() {
          var n3 = L(this, "bs.popover"), i2 = typeof t3 == "object" ? t3 : null;
          if ((n3 || !/dispose|hide/.test(t3)) && (n3 || (n3 = new e2(this, i2), k(this, "bs.popover", n3)), typeof t3 == "string")) {
            if (n3[t3] === void 0)
              throw new TypeError('No method named "' + t3 + '"');
            n3[t3]();
          }
        });
      }, o(e2, null, [{key: "Default", get: function() {
        return Dt;
      }}, {key: "NAME", get: function() {
        return "popover";
      }}, {key: "DATA_KEY", get: function() {
        return "bs.popover";
      }}, {key: "Event", get: function() {
        return Nt;
      }}, {key: "EVENT_KEY", get: function() {
        return ".bs.popover";
      }}, {key: "DefaultType", get: function() {
        return St;
      }}]), e2;
    }(Lt);
    T("popover", Ot);
    var It = {offset: 10, method: "auto", target: ""}, jt = {offset: "number", method: "string", target: "(string|element)"}, Pt = function(t2) {
      function e2(e3, n3) {
        var i2;
        return (i2 = t2.call(this, e3) || this)._scrollElement = e3.tagName === "BODY" ? window : e3, i2._config = i2._getConfig(n3), i2._selector = i2._config.target + " .nav-link, " + i2._config.target + " .list-group-item, " + i2._config.target + " .dropdown-item", i2._offsets = [], i2._targets = [], i2._activeTarget = null, i2._scrollHeight = 0, K.on(i2._scrollElement, "scroll.bs.scrollspy", function() {
          return i2._process();
        }), i2.refresh(), i2._process(), i2;
      }
      r(e2, t2);
      var n2 = e2.prototype;
      return n2.refresh = function() {
        var t3 = this, e3 = this._scrollElement === this._scrollElement.window ? "offset" : "position", n3 = this._config.method === "auto" ? e3 : this._config.method, i2 = n3 === "position" ? this._getScrollTop() : 0;
        this._offsets = [], this._targets = [], this._scrollHeight = this._getScrollHeight(), q(this._selector).map(function(t4) {
          var e4 = h(t4), o2 = e4 ? Q(e4) : null;
          if (o2) {
            var s2 = o2.getBoundingClientRect();
            if (s2.width || s2.height)
              return [X[n3](o2).top + i2, e4];
          }
          return null;
        }).filter(function(t4) {
          return t4;
        }).sort(function(t4, e4) {
          return t4[0] - e4[0];
        }).forEach(function(e4) {
          t3._offsets.push(e4[0]), t3._targets.push(e4[1]);
        });
      }, n2.dispose = function() {
        t2.prototype.dispose.call(this), K.off(this._scrollElement, ".bs.scrollspy"), this._scrollElement = null, this._config = null, this._selector = null, this._offsets = null, this._targets = null, this._activeTarget = null, this._scrollHeight = null;
      }, n2._getConfig = function(t3) {
        if (typeof (t3 = s({}, It, typeof t3 == "object" && t3 ? t3 : {})).target != "string" && g(t3.target)) {
          var e3 = t3.target.id;
          e3 || (e3 = c("scrollspy"), t3.target.id = e3), t3.target = "#" + e3;
        }
        return _("scrollspy", t3, jt), t3;
      }, n2._getScrollTop = function() {
        return this._scrollElement === window ? this._scrollElement.pageYOffset : this._scrollElement.scrollTop;
      }, n2._getScrollHeight = function() {
        return this._scrollElement.scrollHeight || Math.max(document.body.scrollHeight, document.documentElement.scrollHeight);
      }, n2._getOffsetHeight = function() {
        return this._scrollElement === window ? window.innerHeight : this._scrollElement.getBoundingClientRect().height;
      }, n2._process = function() {
        var t3 = this._getScrollTop() + this._config.offset, e3 = this._getScrollHeight(), n3 = this._config.offset + e3 - this._getOffsetHeight();
        if (this._scrollHeight !== e3 && this.refresh(), t3 >= n3) {
          var i2 = this._targets[this._targets.length - 1];
          this._activeTarget !== i2 && this._activate(i2);
        } else {
          if (this._activeTarget && t3 < this._offsets[0] && this._offsets[0] > 0)
            return this._activeTarget = null, void this._clear();
          for (var o2 = this._offsets.length; o2--; )
            this._activeTarget !== this._targets[o2] && t3 >= this._offsets[o2] && (this._offsets[o2 + 1] === void 0 || t3 < this._offsets[o2 + 1]) && this._activate(this._targets[o2]);
        }
      }, n2._activate = function(t3) {
        this._activeTarget = t3, this._clear();
        var e3 = this._selector.split(",").map(function(e4) {
          return e4 + '[data-bs-target="' + t3 + '"],' + e4 + '[href="' + t3 + '"]';
        }), n3 = Q(e3.join(","));
        n3.classList.contains("dropdown-item") ? (Q(".dropdown-toggle", n3.closest(".dropdown")).classList.add("active"), n3.classList.add("active")) : (n3.classList.add("active"), function(t4, e4) {
          for (var n4 = [], i2 = t4.parentNode; i2 && i2.nodeType === Node.ELEMENT_NODE && i2.nodeType !== 3; )
            i2.matches(e4) && n4.push(i2), i2 = i2.parentNode;
          return n4;
        }(n3, ".nav, .list-group").forEach(function(t4) {
          $(t4, ".nav-link, .list-group-item").forEach(function(t5) {
            return t5.classList.add("active");
          }), $(t4, ".nav-item").forEach(function(t5) {
            V(t5, ".nav-link").forEach(function(t6) {
              return t6.classList.add("active");
            });
          });
        })), K.trigger(this._scrollElement, "activate.bs.scrollspy", {relatedTarget: t3});
      }, n2._clear = function() {
        q(this._selector).filter(function(t3) {
          return t3.classList.contains("active");
        }).forEach(function(t3) {
          return t3.classList.remove("active");
        });
      }, e2.jQueryInterface = function(t3) {
        return this.each(function() {
          var n3 = L(this, "bs.scrollspy");
          if (n3 || (n3 = new e2(this, typeof t3 == "object" && t3)), typeof t3 == "string") {
            if (n3[t3] === void 0)
              throw new TypeError('No method named "' + t3 + '"');
            n3[t3]();
          }
        });
      }, o(e2, null, [{key: "Default", get: function() {
        return It;
      }}, {key: "DATA_KEY", get: function() {
        return "bs.scrollspy";
      }}]), e2;
    }(W);
    K.on(window, "load.bs.scrollspy.data-api", function() {
      q('[data-bs-spy="scroll"]').forEach(function(t2) {
        return new Pt(t2, X.getDataAttributes(t2));
      });
    }), T("scrollspy", Pt);
    var xt = function(t2) {
      function e2() {
        return t2.apply(this, arguments) || this;
      }
      r(e2, t2);
      var n2 = e2.prototype;
      return n2.show = function() {
        var t3 = this;
        if (!(this._element.parentNode && this._element.parentNode.nodeType === Node.ELEMENT_NODE && this._element.classList.contains("active") || this._element.classList.contains("disabled"))) {
          var e3, n3 = d(this._element), i2 = this._element.closest(".nav, .list-group");
          if (i2) {
            var o2 = i2.nodeName === "UL" || i2.nodeName === "OL" ? ":scope > li > .active" : ".active";
            e3 = (e3 = q(o2, i2))[e3.length - 1];
          }
          var s2 = e3 ? K.trigger(e3, "hide.bs.tab", {relatedTarget: this._element}) : null;
          if (!(K.trigger(this._element, "show.bs.tab", {relatedTarget: e3}).defaultPrevented || s2 !== null && s2.defaultPrevented)) {
            this._activate(this._element, i2);
            var r2 = function() {
              K.trigger(e3, "hidden.bs.tab", {relatedTarget: t3._element}), K.trigger(t3._element, "shown.bs.tab", {relatedTarget: e3});
            };
            n3 ? this._activate(n3, n3.parentNode, r2) : r2();
          }
        }
      }, n2._activate = function(t3, e3, n3) {
        var i2 = this, o2 = (!e3 || e3.nodeName !== "UL" && e3.nodeName !== "OL" ? V(e3, ".active") : q(":scope > li > .active", e3))[0], s2 = n3 && o2 && o2.classList.contains("fade"), r2 = function() {
          return i2._transitionComplete(t3, o2, n3);
        };
        if (o2 && s2) {
          var a2 = f(o2);
          o2.classList.remove("show"), K.one(o2, "transitionend", r2), m(o2, a2);
        } else
          r2();
      }, n2._transitionComplete = function(t3, e3, n3) {
        if (e3) {
          e3.classList.remove("active");
          var i2 = Q(":scope > .dropdown-menu .active", e3.parentNode);
          i2 && i2.classList.remove("active"), e3.getAttribute("role") === "tab" && e3.setAttribute("aria-selected", false);
        }
        t3.classList.add("active"), t3.getAttribute("role") === "tab" && t3.setAttribute("aria-selected", true), y(t3), t3.classList.contains("fade") && t3.classList.add("show"), t3.parentNode && t3.parentNode.classList.contains("dropdown-menu") && (t3.closest(".dropdown") && q(".dropdown-toggle").forEach(function(t4) {
          return t4.classList.add("active");
        }), t3.setAttribute("aria-expanded", true)), n3 && n3();
      }, e2.jQueryInterface = function(t3) {
        return this.each(function() {
          var n3 = L(this, "bs.tab") || new e2(this);
          if (typeof t3 == "string") {
            if (n3[t3] === void 0)
              throw new TypeError('No method named "' + t3 + '"');
            n3[t3]();
          }
        });
      }, o(e2, null, [{key: "DATA_KEY", get: function() {
        return "bs.tab";
      }}]), e2;
    }(W);
    K.on(document, "click.bs.tab.data-api", '[data-bs-toggle="tab"], [data-bs-toggle="pill"], [data-bs-toggle="list"]', function(t2) {
      t2.preventDefault(), (L(this, "bs.tab") || new xt(this)).show();
    }), T("tab", xt);
    var Ht = {animation: "boolean", autohide: "boolean", delay: "number"}, Bt = {animation: true, autohide: true, delay: 5e3}, Mt = function(t2) {
      function e2(e3, n3) {
        var i2;
        return (i2 = t2.call(this, e3) || this)._config = i2._getConfig(n3), i2._timeout = null, i2._setListeners(), i2;
      }
      r(e2, t2);
      var n2 = e2.prototype;
      return n2.show = function() {
        var t3 = this;
        if (!K.trigger(this._element, "show.bs.toast").defaultPrevented) {
          this._clearTimeout(), this._config.animation && this._element.classList.add("fade");
          var e3 = function() {
            t3._element.classList.remove("showing"), t3._element.classList.add("show"), K.trigger(t3._element, "shown.bs.toast"), t3._config.autohide && (t3._timeout = setTimeout(function() {
              t3.hide();
            }, t3._config.delay));
          };
          if (this._element.classList.remove("hide"), y(this._element), this._element.classList.add("showing"), this._config.animation) {
            var n3 = f(this._element);
            K.one(this._element, "transitionend", e3), m(this._element, n3);
          } else
            e3();
        }
      }, n2.hide = function() {
        var t3 = this;
        if (this._element.classList.contains("show") && !K.trigger(this._element, "hide.bs.toast").defaultPrevented) {
          var e3 = function() {
            t3._element.classList.add("hide"), K.trigger(t3._element, "hidden.bs.toast");
          };
          if (this._element.classList.remove("show"), this._config.animation) {
            var n3 = f(this._element);
            K.one(this._element, "transitionend", e3), m(this._element, n3);
          } else
            e3();
        }
      }, n2.dispose = function() {
        this._clearTimeout(), this._element.classList.contains("show") && this._element.classList.remove("show"), K.off(this._element, "click.dismiss.bs.toast"), t2.prototype.dispose.call(this), this._config = null;
      }, n2._getConfig = function(t3) {
        return t3 = s({}, Bt, X.getDataAttributes(this._element), typeof t3 == "object" && t3 ? t3 : {}), _("toast", t3, this.constructor.DefaultType), t3;
      }, n2._setListeners = function() {
        var t3 = this;
        K.on(this._element, "click.dismiss.bs.toast", '[data-bs-dismiss="toast"]', function() {
          return t3.hide();
        });
      }, n2._clearTimeout = function() {
        clearTimeout(this._timeout), this._timeout = null;
      }, e2.jQueryInterface = function(t3) {
        return this.each(function() {
          var n3 = L(this, "bs.toast");
          if (n3 || (n3 = new e2(this, typeof t3 == "object" && t3)), typeof t3 == "string") {
            if (n3[t3] === void 0)
              throw new TypeError('No method named "' + t3 + '"');
            n3[t3](this);
          }
        });
      }, o(e2, null, [{key: "DefaultType", get: function() {
        return Ht;
      }}, {key: "Default", get: function() {
        return Bt;
      }}, {key: "DATA_KEY", get: function() {
        return "bs.toast";
      }}]), e2;
    }(W);
    return T("toast", Mt), {Alert: U, Button: F, Carousel: J, Collapse: nt, Dropdown: dt, Modal: gt, Popover: Ot, ScrollSpy: Pt, Tab: xt, Toast: Mt, Tooltip: Lt};
  });
});

// node_modules/@popperjs/core/lib/enums.js
var top = "top";
var bottom = "bottom";
var right = "right";
var left = "left";
var auto = "auto";
var basePlacements = [top, bottom, right, left];
var start = "start";
var end = "end";
var clippingParents = "clippingParents";
var viewport = "viewport";
var popper = "popper";
var reference = "reference";
var variationPlacements = basePlacements.reduce(function(acc, placement) {
  return acc.concat([placement + "-" + start, placement + "-" + end]);
}, []);
var placements = [].concat(basePlacements, [auto]).reduce(function(acc, placement) {
  return acc.concat([placement, placement + "-" + start, placement + "-" + end]);
}, []);
var beforeRead = "beforeRead";
var read = "read";
var afterRead = "afterRead";
var beforeMain = "beforeMain";
var main = "main";
var afterMain = "afterMain";
var beforeWrite = "beforeWrite";
var write = "write";
var afterWrite = "afterWrite";
var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];

// node_modules/@popperjs/core/lib/dom-utils/getNodeName.js
function getNodeName(element) {
  return element ? (element.nodeName || "").toLowerCase() : null;
}

// node_modules/@popperjs/core/lib/dom-utils/getWindow.js
function getWindow(node) {
  if (node.toString() !== "[object Window]") {
    var ownerDocument = node.ownerDocument;
    return ownerDocument ? ownerDocument.defaultView || window : window;
  }
  return node;
}

// node_modules/@popperjs/core/lib/dom-utils/instanceOf.js
function isElement(node) {
  var OwnElement = getWindow(node).Element;
  return node instanceof OwnElement || node instanceof Element;
}
function isHTMLElement(node) {
  var OwnElement = getWindow(node).HTMLElement;
  return node instanceof OwnElement || node instanceof HTMLElement;
}
function isShadowRoot(node) {
  var OwnElement = getWindow(node).ShadowRoot;
  return node instanceof OwnElement || node instanceof ShadowRoot;
}

// node_modules/@popperjs/core/lib/modifiers/applyStyles.js
function applyStyles(_ref) {
  var state = _ref.state;
  Object.keys(state.elements).forEach(function(name) {
    var style = state.styles[name] || {};
    var attributes = state.attributes[name] || {};
    var element = state.elements[name];
    if (!isHTMLElement(element) || !getNodeName(element)) {
      return;
    }
    Object.assign(element.style, style);
    Object.keys(attributes).forEach(function(name2) {
      var value = attributes[name2];
      if (value === false) {
        element.removeAttribute(name2);
      } else {
        element.setAttribute(name2, value === true ? "" : value);
      }
    });
  });
}
function effect(_ref2) {
  var state = _ref2.state;
  var initialStyles = {
    popper: {
      position: state.options.strategy,
      left: "0",
      top: "0",
      margin: "0"
    },
    arrow: {
      position: "absolute"
    },
    reference: {}
  };
  Object.assign(state.elements.popper.style, initialStyles.popper);
  if (state.elements.arrow) {
    Object.assign(state.elements.arrow.style, initialStyles.arrow);
  }
  return function() {
    Object.keys(state.elements).forEach(function(name) {
      var element = state.elements[name];
      var attributes = state.attributes[name] || {};
      var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]);
      var style = styleProperties.reduce(function(style2, property) {
        style2[property] = "";
        return style2;
      }, {});
      if (!isHTMLElement(element) || !getNodeName(element)) {
        return;
      }
      Object.assign(element.style, style);
      Object.keys(attributes).forEach(function(attribute) {
        element.removeAttribute(attribute);
      });
    });
  };
}
var applyStyles_default = {
  name: "applyStyles",
  enabled: true,
  phase: "write",
  fn: applyStyles,
  effect,
  requires: ["computeStyles"]
};

// node_modules/@popperjs/core/lib/utils/getBasePlacement.js
function getBasePlacement(placement) {
  return placement.split("-")[0];
}

// node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js
function getLayoutRect(element) {
  return {
    x: element.offsetLeft,
    y: element.offsetTop,
    width: element.offsetWidth,
    height: element.offsetHeight
  };
}

// node_modules/@popperjs/core/lib/dom-utils/contains.js
function contains(parent, child) {
  var rootNode = child.getRootNode && child.getRootNode();
  if (parent.contains(child)) {
    return true;
  } else if (rootNode && isShadowRoot(rootNode)) {
    var next = child;
    do {
      if (next && parent.isSameNode(next)) {
        return true;
      }
      next = next.parentNode || next.host;
    } while (next);
  }
  return false;
}

// node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js
function getComputedStyle2(element) {
  return getWindow(element).getComputedStyle(element);
}

// node_modules/@popperjs/core/lib/dom-utils/isTableElement.js
function isTableElement(element) {
  return ["table", "td", "th"].indexOf(getNodeName(element)) >= 0;
}

// node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js
function getDocumentElement(element) {
  return ((isElement(element) ? element.ownerDocument : element.document) || window.document).documentElement;
}

// node_modules/@popperjs/core/lib/dom-utils/getParentNode.js
function getParentNode(element) {
  if (getNodeName(element) === "html") {
    return element;
  }
  return element.assignedSlot || element.parentNode || element.host || getDocumentElement(element);
}

// node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js
function getTrueOffsetParent(element) {
  if (!isHTMLElement(element) || getComputedStyle2(element).position === "fixed") {
    return null;
  }
  var offsetParent = element.offsetParent;
  if (offsetParent) {
    var html = getDocumentElement(offsetParent);
    if (getNodeName(offsetParent) === "body" && getComputedStyle2(offsetParent).position === "static" && getComputedStyle2(html).position !== "static") {
      return html;
    }
  }
  return offsetParent;
}
function getContainingBlock(element) {
  var currentNode = getParentNode(element);
  while (isHTMLElement(currentNode) && ["html", "body"].indexOf(getNodeName(currentNode)) < 0) {
    var css = getComputedStyle2(currentNode);
    if (css.transform !== "none" || css.perspective !== "none" || css.willChange && css.willChange !== "auto") {
      return currentNode;
    } else {
      currentNode = currentNode.parentNode;
    }
  }
  return null;
}
function getOffsetParent(element) {
  var window2 = getWindow(element);
  var offsetParent = getTrueOffsetParent(element);
  while (offsetParent && isTableElement(offsetParent) && getComputedStyle2(offsetParent).position === "static") {
    offsetParent = getTrueOffsetParent(offsetParent);
  }
  if (offsetParent && getNodeName(offsetParent) === "body" && getComputedStyle2(offsetParent).position === "static") {
    return window2;
  }
  return offsetParent || getContainingBlock(element) || window2;
}

// node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js
function getMainAxisFromPlacement(placement) {
  return ["top", "bottom"].indexOf(placement) >= 0 ? "x" : "y";
}

// node_modules/@popperjs/core/lib/utils/within.js
function within(min, value, max) {
  return Math.max(min, Math.min(value, max));
}

// node_modules/@popperjs/core/lib/utils/getFreshSideObject.js
function getFreshSideObject() {
  return {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0
  };
}

// node_modules/@popperjs/core/lib/utils/mergePaddingObject.js
function mergePaddingObject(paddingObject) {
  return Object.assign(Object.assign({}, getFreshSideObject()), paddingObject);
}

// node_modules/@popperjs/core/lib/utils/expandToHashMap.js
function expandToHashMap(value, keys) {
  return keys.reduce(function(hashMap, key) {
    hashMap[key] = value;
    return hashMap;
  }, {});
}

// node_modules/@popperjs/core/lib/modifiers/arrow.js
function arrow(_ref) {
  var _state$modifiersData$;
  var state = _ref.state, name = _ref.name;
  var arrowElement = state.elements.arrow;
  var popperOffsets2 = state.modifiersData.popperOffsets;
  var basePlacement = getBasePlacement(state.placement);
  var axis = getMainAxisFromPlacement(basePlacement);
  var isVertical = [left, right].indexOf(basePlacement) >= 0;
  var len = isVertical ? "height" : "width";
  if (!arrowElement || !popperOffsets2) {
    return;
  }
  var paddingObject = state.modifiersData[name + "#persistent"].padding;
  var arrowRect = getLayoutRect(arrowElement);
  var minProp = axis === "y" ? top : left;
  var maxProp = axis === "y" ? bottom : right;
  var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets2[axis] - state.rects.popper[len];
  var startDiff = popperOffsets2[axis] - state.rects.reference[axis];
  var arrowOffsetParent = getOffsetParent(arrowElement);
  var clientSize = arrowOffsetParent ? axis === "y" ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
  var centerToReference = endDiff / 2 - startDiff / 2;
  var min = paddingObject[minProp];
  var max = clientSize - arrowRect[len] - paddingObject[maxProp];
  var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
  var offset2 = within(min, center, max);
  var axisProp = axis;
  state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset2, _state$modifiersData$.centerOffset = offset2 - center, _state$modifiersData$);
}
function effect2(_ref2) {
  var state = _ref2.state, options = _ref2.options, name = _ref2.name;
  var _options$element = options.element, arrowElement = _options$element === void 0 ? "[data-popper-arrow]" : _options$element, _options$padding = options.padding, padding = _options$padding === void 0 ? 0 : _options$padding;
  if (arrowElement == null) {
    return;
  }
  if (typeof arrowElement === "string") {
    arrowElement = state.elements.popper.querySelector(arrowElement);
    if (!arrowElement) {
      return;
    }
  }
  if (true) {
    if (!isHTMLElement(arrowElement)) {
      console.error(['Popper: "arrow" element must be an HTMLElement (not an SVGElement).', "To use an SVG arrow, wrap it in an HTMLElement that will be used as", "the arrow."].join(" "));
    }
  }
  if (!contains(state.elements.popper, arrowElement)) {
    if (true) {
      console.error(['Popper: "arrow" modifier\'s `element` must be a child of the popper', "element."].join(" "));
    }
    return;
  }
  state.elements.arrow = arrowElement;
  state.modifiersData[name + "#persistent"] = {
    padding: mergePaddingObject(typeof padding !== "number" ? padding : expandToHashMap(padding, basePlacements))
  };
}
var arrow_default = {
  name: "arrow",
  enabled: true,
  phase: "main",
  fn: arrow,
  effect: effect2,
  requires: ["popperOffsets"],
  requiresIfExists: ["preventOverflow"]
};

// node_modules/@popperjs/core/lib/modifiers/computeStyles.js
var unsetSides = {
  top: "auto",
  right: "auto",
  bottom: "auto",
  left: "auto"
};
function roundOffsetsByDPR(_ref) {
  var x = _ref.x, y = _ref.y;
  var win = window;
  var dpr = win.devicePixelRatio || 1;
  return {
    x: Math.round(x * dpr) / dpr || 0,
    y: Math.round(y * dpr) / dpr || 0
  };
}
function mapToStyles(_ref2) {
  var _Object$assign2;
  var popper2 = _ref2.popper, popperRect = _ref2.popperRect, placement = _ref2.placement, offsets = _ref2.offsets, position = _ref2.position, gpuAcceleration = _ref2.gpuAcceleration, adaptive = _ref2.adaptive, roundOffsets = _ref2.roundOffsets;
  var _ref3 = roundOffsets ? roundOffsetsByDPR(offsets) : offsets, _ref3$x = _ref3.x, x = _ref3$x === void 0 ? 0 : _ref3$x, _ref3$y = _ref3.y, y = _ref3$y === void 0 ? 0 : _ref3$y;
  var hasX = offsets.hasOwnProperty("x");
  var hasY = offsets.hasOwnProperty("y");
  var sideX = left;
  var sideY = top;
  var win = window;
  if (adaptive) {
    var offsetParent = getOffsetParent(popper2);
    if (offsetParent === getWindow(popper2)) {
      offsetParent = getDocumentElement(popper2);
    }
    if (placement === top) {
      sideY = bottom;
      y -= offsetParent.clientHeight - popperRect.height;
      y *= gpuAcceleration ? 1 : -1;
    }
    if (placement === left) {
      sideX = right;
      x -= offsetParent.clientWidth - popperRect.width;
      x *= gpuAcceleration ? 1 : -1;
    }
  }
  var commonStyles = Object.assign({
    position
  }, adaptive && unsetSides);
  if (gpuAcceleration) {
    var _Object$assign;
    return Object.assign(Object.assign({}, commonStyles), {}, (_Object$assign = {}, _Object$assign[sideY] = hasY ? "0" : "", _Object$assign[sideX] = hasX ? "0" : "", _Object$assign.transform = (win.devicePixelRatio || 1) < 2 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
  }
  return Object.assign(Object.assign({}, commonStyles), {}, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + "px" : "", _Object$assign2[sideX] = hasX ? x + "px" : "", _Object$assign2.transform = "", _Object$assign2));
}
function computeStyles(_ref4) {
  var state = _ref4.state, options = _ref4.options;
  var _options$gpuAccelerat = options.gpuAcceleration, gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat, _options$adaptive = options.adaptive, adaptive = _options$adaptive === void 0 ? true : _options$adaptive, _options$roundOffsets = options.roundOffsets, roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;
  if (true) {
    var transitionProperty = getComputedStyle2(state.elements.popper).transitionProperty || "";
    if (adaptive && ["transform", "top", "right", "bottom", "left"].some(function(property) {
      return transitionProperty.indexOf(property) >= 0;
    })) {
      console.warn(["Popper: Detected CSS transitions on at least one of the following", 'CSS properties: "transform", "top", "right", "bottom", "left".', "\n\n", 'Disable the "computeStyles" modifier\'s `adaptive` option to allow', "for smooth transitions, or remove these properties from the CSS", "transition declaration on the popper element if only transitioning", "opacity or background-color for example.", "\n\n", "We recommend using the popper element as a wrapper around an inner", "element that can have any CSS property transitioned for animations."].join(" "));
    }
  }
  var commonStyles = {
    placement: getBasePlacement(state.placement),
    popper: state.elements.popper,
    popperRect: state.rects.popper,
    gpuAcceleration
  };
  if (state.modifiersData.popperOffsets != null) {
    state.styles.popper = Object.assign(Object.assign({}, state.styles.popper), mapToStyles(Object.assign(Object.assign({}, commonStyles), {}, {
      offsets: state.modifiersData.popperOffsets,
      position: state.options.strategy,
      adaptive,
      roundOffsets
    })));
  }
  if (state.modifiersData.arrow != null) {
    state.styles.arrow = Object.assign(Object.assign({}, state.styles.arrow), mapToStyles(Object.assign(Object.assign({}, commonStyles), {}, {
      offsets: state.modifiersData.arrow,
      position: "absolute",
      adaptive: false,
      roundOffsets
    })));
  }
  state.attributes.popper = Object.assign(Object.assign({}, state.attributes.popper), {}, {
    "data-popper-placement": state.placement
  });
}
var computeStyles_default = {
  name: "computeStyles",
  enabled: true,
  phase: "beforeWrite",
  fn: computeStyles,
  data: {}
};

// node_modules/@popperjs/core/lib/modifiers/eventListeners.js
var passive = {
  passive: true
};
function effect3(_ref) {
  var state = _ref.state, instance = _ref.instance, options = _ref.options;
  var _options$scroll = options.scroll, scroll = _options$scroll === void 0 ? true : _options$scroll, _options$resize = options.resize, resize = _options$resize === void 0 ? true : _options$resize;
  var window2 = getWindow(state.elements.popper);
  var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);
  if (scroll) {
    scrollParents.forEach(function(scrollParent) {
      scrollParent.addEventListener("scroll", instance.update, passive);
    });
  }
  if (resize) {
    window2.addEventListener("resize", instance.update, passive);
  }
  return function() {
    if (scroll) {
      scrollParents.forEach(function(scrollParent) {
        scrollParent.removeEventListener("scroll", instance.update, passive);
      });
    }
    if (resize) {
      window2.removeEventListener("resize", instance.update, passive);
    }
  };
}
var eventListeners_default = {
  name: "eventListeners",
  enabled: true,
  phase: "write",
  fn: function fn() {
  },
  effect: effect3,
  data: {}
};

// node_modules/@popperjs/core/lib/utils/getOppositePlacement.js
var hash = {
  left: "right",
  right: "left",
  bottom: "top",
  top: "bottom"
};
function getOppositePlacement(placement) {
  return placement.replace(/left|right|bottom|top/g, function(matched) {
    return hash[matched];
  });
}

// node_modules/@popperjs/core/lib/utils/getOppositeVariationPlacement.js
var hash2 = {
  start: "end",
  end: "start"
};
function getOppositeVariationPlacement(placement) {
  return placement.replace(/start|end/g, function(matched) {
    return hash2[matched];
  });
}

// node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js
function getBoundingClientRect(element) {
  var rect = element.getBoundingClientRect();
  return {
    width: rect.width,
    height: rect.height,
    top: rect.top,
    right: rect.right,
    bottom: rect.bottom,
    left: rect.left,
    x: rect.left,
    y: rect.top
  };
}

// node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js
function getWindowScroll(node) {
  var win = getWindow(node);
  var scrollLeft = win.pageXOffset;
  var scrollTop = win.pageYOffset;
  return {
    scrollLeft,
    scrollTop
  };
}

// node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js
function getWindowScrollBarX(element) {
  return getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll(element).scrollLeft;
}

// node_modules/@popperjs/core/lib/dom-utils/getViewportRect.js
function getViewportRect(element) {
  var win = getWindow(element);
  var html = getDocumentElement(element);
  var visualViewport = win.visualViewport;
  var width = html.clientWidth;
  var height = html.clientHeight;
  var x = 0;
  var y = 0;
  if (visualViewport) {
    width = visualViewport.width;
    height = visualViewport.height;
    if (!/^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {
      x = visualViewport.offsetLeft;
      y = visualViewport.offsetTop;
    }
  }
  return {
    width,
    height,
    x: x + getWindowScrollBarX(element),
    y
  };
}

// node_modules/@popperjs/core/lib/dom-utils/getDocumentRect.js
function getDocumentRect(element) {
  var html = getDocumentElement(element);
  var winScroll = getWindowScroll(element);
  var body = element.ownerDocument.body;
  var width = Math.max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
  var height = Math.max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
  var x = -winScroll.scrollLeft + getWindowScrollBarX(element);
  var y = -winScroll.scrollTop;
  if (getComputedStyle2(body || html).direction === "rtl") {
    x += Math.max(html.clientWidth, body ? body.clientWidth : 0) - width;
  }
  return {
    width,
    height,
    x,
    y
  };
}

// node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js
function isScrollParent(element) {
  var _getComputedStyle = getComputedStyle2(element), overflow = _getComputedStyle.overflow, overflowX = _getComputedStyle.overflowX, overflowY = _getComputedStyle.overflowY;
  return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
}

// node_modules/@popperjs/core/lib/dom-utils/getScrollParent.js
function getScrollParent(node) {
  if (["html", "body", "#document"].indexOf(getNodeName(node)) >= 0) {
    return node.ownerDocument.body;
  }
  if (isHTMLElement(node) && isScrollParent(node)) {
    return node;
  }
  return getScrollParent(getParentNode(node));
}

// node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js
function listScrollParents(element, list) {
  if (list === void 0) {
    list = [];
  }
  var scrollParent = getScrollParent(element);
  var isBody = getNodeName(scrollParent) === "body";
  var win = getWindow(scrollParent);
  var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
  var updatedList = list.concat(target);
  return isBody ? updatedList : updatedList.concat(listScrollParents(getParentNode(target)));
}

// node_modules/@popperjs/core/lib/utils/rectToClientRect.js
function rectToClientRect(rect) {
  return Object.assign(Object.assign({}, rect), {}, {
    left: rect.x,
    top: rect.y,
    right: rect.x + rect.width,
    bottom: rect.y + rect.height
  });
}

// node_modules/@popperjs/core/lib/dom-utils/getClippingRect.js
function getInnerBoundingClientRect(element) {
  var rect = getBoundingClientRect(element);
  rect.top = rect.top + element.clientTop;
  rect.left = rect.left + element.clientLeft;
  rect.bottom = rect.top + element.clientHeight;
  rect.right = rect.left + element.clientWidth;
  rect.width = element.clientWidth;
  rect.height = element.clientHeight;
  rect.x = rect.left;
  rect.y = rect.top;
  return rect;
}
function getClientRectFromMixedType(element, clippingParent) {
  return clippingParent === viewport ? rectToClientRect(getViewportRect(element)) : isHTMLElement(clippingParent) ? getInnerBoundingClientRect(clippingParent) : rectToClientRect(getDocumentRect(getDocumentElement(element)));
}
function getClippingParents(element) {
  var clippingParents2 = listScrollParents(getParentNode(element));
  var canEscapeClipping = ["absolute", "fixed"].indexOf(getComputedStyle2(element).position) >= 0;
  var clipperElement = canEscapeClipping && isHTMLElement(element) ? getOffsetParent(element) : element;
  if (!isElement(clipperElement)) {
    return [];
  }
  return clippingParents2.filter(function(clippingParent) {
    return isElement(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== "body";
  });
}
function getClippingRect(element, boundary, rootBoundary) {
  var mainClippingParents = boundary === "clippingParents" ? getClippingParents(element) : [].concat(boundary);
  var clippingParents2 = [].concat(mainClippingParents, [rootBoundary]);
  var firstClippingParent = clippingParents2[0];
  var clippingRect = clippingParents2.reduce(function(accRect, clippingParent) {
    var rect = getClientRectFromMixedType(element, clippingParent);
    accRect.top = Math.max(rect.top, accRect.top);
    accRect.right = Math.min(rect.right, accRect.right);
    accRect.bottom = Math.min(rect.bottom, accRect.bottom);
    accRect.left = Math.max(rect.left, accRect.left);
    return accRect;
  }, getClientRectFromMixedType(element, firstClippingParent));
  clippingRect.width = clippingRect.right - clippingRect.left;
  clippingRect.height = clippingRect.bottom - clippingRect.top;
  clippingRect.x = clippingRect.left;
  clippingRect.y = clippingRect.top;
  return clippingRect;
}

// node_modules/@popperjs/core/lib/utils/getVariation.js
function getVariation(placement) {
  return placement.split("-")[1];
}

// node_modules/@popperjs/core/lib/utils/computeOffsets.js
function computeOffsets(_ref) {
  var reference2 = _ref.reference, element = _ref.element, placement = _ref.placement;
  var basePlacement = placement ? getBasePlacement(placement) : null;
  var variation = placement ? getVariation(placement) : null;
  var commonX = reference2.x + reference2.width / 2 - element.width / 2;
  var commonY = reference2.y + reference2.height / 2 - element.height / 2;
  var offsets;
  switch (basePlacement) {
    case top:
      offsets = {
        x: commonX,
        y: reference2.y - element.height
      };
      break;
    case bottom:
      offsets = {
        x: commonX,
        y: reference2.y + reference2.height
      };
      break;
    case right:
      offsets = {
        x: reference2.x + reference2.width,
        y: commonY
      };
      break;
    case left:
      offsets = {
        x: reference2.x - element.width,
        y: commonY
      };
      break;
    default:
      offsets = {
        x: reference2.x,
        y: reference2.y
      };
  }
  var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;
  if (mainAxis != null) {
    var len = mainAxis === "y" ? "height" : "width";
    switch (variation) {
      case start:
        offsets[mainAxis] = offsets[mainAxis] - (reference2[len] / 2 - element[len] / 2);
        break;
      case end:
        offsets[mainAxis] = offsets[mainAxis] + (reference2[len] / 2 - element[len] / 2);
        break;
      default:
    }
  }
  return offsets;
}

// node_modules/@popperjs/core/lib/utils/detectOverflow.js
function detectOverflow(state, options) {
  if (options === void 0) {
    options = {};
  }
  var _options = options, _options$placement = _options.placement, placement = _options$placement === void 0 ? state.placement : _options$placement, _options$boundary = _options.boundary, boundary = _options$boundary === void 0 ? clippingParents : _options$boundary, _options$rootBoundary = _options.rootBoundary, rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary, _options$elementConte = _options.elementContext, elementContext = _options$elementConte === void 0 ? popper : _options$elementConte, _options$altBoundary = _options.altBoundary, altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary, _options$padding = _options.padding, padding = _options$padding === void 0 ? 0 : _options$padding;
  var paddingObject = mergePaddingObject(typeof padding !== "number" ? padding : expandToHashMap(padding, basePlacements));
  var altContext = elementContext === popper ? reference : popper;
  var referenceElement = state.elements.reference;
  var popperRect = state.rects.popper;
  var element = state.elements[altBoundary ? altContext : elementContext];
  var clippingClientRect = getClippingRect(isElement(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary);
  var referenceClientRect = getBoundingClientRect(referenceElement);
  var popperOffsets2 = computeOffsets({
    reference: referenceClientRect,
    element: popperRect,
    strategy: "absolute",
    placement
  });
  var popperClientRect = rectToClientRect(Object.assign(Object.assign({}, popperRect), popperOffsets2));
  var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect;
  var overflowOffsets = {
    top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
    bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
    left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
    right: elementClientRect.right - clippingClientRect.right + paddingObject.right
  };
  var offsetData = state.modifiersData.offset;
  if (elementContext === popper && offsetData) {
    var offset2 = offsetData[placement];
    Object.keys(overflowOffsets).forEach(function(key) {
      var multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;
      var axis = [top, bottom].indexOf(key) >= 0 ? "y" : "x";
      overflowOffsets[key] += offset2[axis] * multiply;
    });
  }
  return overflowOffsets;
}

// node_modules/@popperjs/core/lib/utils/computeAutoPlacement.js
function computeAutoPlacement(state, options) {
  if (options === void 0) {
    options = {};
  }
  var _options = options, placement = _options.placement, boundary = _options.boundary, rootBoundary = _options.rootBoundary, padding = _options.padding, flipVariations = _options.flipVariations, _options$allowedAutoP = _options.allowedAutoPlacements, allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;
  var variation = getVariation(placement);
  var placements2 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function(placement2) {
    return getVariation(placement2) === variation;
  }) : basePlacements;
  var allowedPlacements = placements2.filter(function(placement2) {
    return allowedAutoPlacements.indexOf(placement2) >= 0;
  });
  if (allowedPlacements.length === 0) {
    allowedPlacements = placements2;
    if (true) {
      console.error(["Popper: The `allowedAutoPlacements` option did not allow any", "placements. Ensure the `placement` option matches the variation", "of the allowed placements.", 'For example, "auto" cannot be used to allow "bottom-start".', 'Use "auto-start" instead.'].join(" "));
    }
  }
  var overflows = allowedPlacements.reduce(function(acc, placement2) {
    acc[placement2] = detectOverflow(state, {
      placement: placement2,
      boundary,
      rootBoundary,
      padding
    })[getBasePlacement(placement2)];
    return acc;
  }, {});
  return Object.keys(overflows).sort(function(a, b) {
    return overflows[a] - overflows[b];
  });
}

// node_modules/@popperjs/core/lib/modifiers/flip.js
function getExpandedFallbackPlacements(placement) {
  if (getBasePlacement(placement) === auto) {
    return [];
  }
  var oppositePlacement = getOppositePlacement(placement);
  return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];
}
function flip(_ref) {
  var state = _ref.state, options = _ref.options, name = _ref.name;
  if (state.modifiersData[name]._skip) {
    return;
  }
  var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis, specifiedFallbackPlacements = options.fallbackPlacements, padding = options.padding, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, _options$flipVariatio = options.flipVariations, flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio, allowedAutoPlacements = options.allowedAutoPlacements;
  var preferredPlacement = state.options.placement;
  var basePlacement = getBasePlacement(preferredPlacement);
  var isBasePlacement = basePlacement === preferredPlacement;
  var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
  var placements2 = [preferredPlacement].concat(fallbackPlacements).reduce(function(acc, placement2) {
    return acc.concat(getBasePlacement(placement2) === auto ? computeAutoPlacement(state, {
      placement: placement2,
      boundary,
      rootBoundary,
      padding,
      flipVariations,
      allowedAutoPlacements
    }) : placement2);
  }, []);
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var checksMap = new Map();
  var makeFallbackChecks = true;
  var firstFittingPlacement = placements2[0];
  for (var i = 0; i < placements2.length; i++) {
    var placement = placements2[i];
    var _basePlacement = getBasePlacement(placement);
    var isStartVariation = getVariation(placement) === start;
    var isVertical = [top, bottom].indexOf(_basePlacement) >= 0;
    var len = isVertical ? "width" : "height";
    var overflow = detectOverflow(state, {
      placement,
      boundary,
      rootBoundary,
      altBoundary,
      padding
    });
    var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;
    if (referenceRect[len] > popperRect[len]) {
      mainVariationSide = getOppositePlacement(mainVariationSide);
    }
    var altVariationSide = getOppositePlacement(mainVariationSide);
    var checks = [];
    if (checkMainAxis) {
      checks.push(overflow[_basePlacement] <= 0);
    }
    if (checkAltAxis) {
      checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
    }
    if (checks.every(function(check) {
      return check;
    })) {
      firstFittingPlacement = placement;
      makeFallbackChecks = false;
      break;
    }
    checksMap.set(placement, checks);
  }
  if (makeFallbackChecks) {
    var numberOfChecks = flipVariations ? 3 : 1;
    var _loop = function _loop2(_i2) {
      var fittingPlacement = placements2.find(function(placement2) {
        var checks2 = checksMap.get(placement2);
        if (checks2) {
          return checks2.slice(0, _i2).every(function(check) {
            return check;
          });
        }
      });
      if (fittingPlacement) {
        firstFittingPlacement = fittingPlacement;
        return "break";
      }
    };
    for (var _i = numberOfChecks; _i > 0; _i--) {
      var _ret = _loop(_i);
      if (_ret === "break")
        break;
    }
  }
  if (state.placement !== firstFittingPlacement) {
    state.modifiersData[name]._skip = true;
    state.placement = firstFittingPlacement;
    state.reset = true;
  }
}
var flip_default = {
  name: "flip",
  enabled: true,
  phase: "main",
  fn: flip,
  requiresIfExists: ["offset"],
  data: {
    _skip: false
  }
};

// node_modules/@popperjs/core/lib/modifiers/hide.js
function getSideOffsets(overflow, rect, preventedOffsets) {
  if (preventedOffsets === void 0) {
    preventedOffsets = {
      x: 0,
      y: 0
    };
  }
  return {
    top: overflow.top - rect.height - preventedOffsets.y,
    right: overflow.right - rect.width + preventedOffsets.x,
    bottom: overflow.bottom - rect.height + preventedOffsets.y,
    left: overflow.left - rect.width - preventedOffsets.x
  };
}
function isAnySideFullyClipped(overflow) {
  return [top, right, bottom, left].some(function(side) {
    return overflow[side] >= 0;
  });
}
function hide(_ref) {
  var state = _ref.state, name = _ref.name;
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var preventedOffsets = state.modifiersData.preventOverflow;
  var referenceOverflow = detectOverflow(state, {
    elementContext: "reference"
  });
  var popperAltOverflow = detectOverflow(state, {
    altBoundary: true
  });
  var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
  var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
  var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
  var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
  state.modifiersData[name] = {
    referenceClippingOffsets,
    popperEscapeOffsets,
    isReferenceHidden,
    hasPopperEscaped
  };
  state.attributes.popper = Object.assign(Object.assign({}, state.attributes.popper), {}, {
    "data-popper-reference-hidden": isReferenceHidden,
    "data-popper-escaped": hasPopperEscaped
  });
}
var hide_default = {
  name: "hide",
  enabled: true,
  phase: "main",
  requiresIfExists: ["preventOverflow"],
  fn: hide
};

// node_modules/@popperjs/core/lib/modifiers/offset.js
function distanceAndSkiddingToXY(placement, rects, offset2) {
  var basePlacement = getBasePlacement(placement);
  var invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;
  var _ref = typeof offset2 === "function" ? offset2(Object.assign(Object.assign({}, rects), {}, {
    placement
  })) : offset2, skidding = _ref[0], distance = _ref[1];
  skidding = skidding || 0;
  distance = (distance || 0) * invertDistance;
  return [left, right].indexOf(basePlacement) >= 0 ? {
    x: distance,
    y: skidding
  } : {
    x: skidding,
    y: distance
  };
}
function offset(_ref2) {
  var state = _ref2.state, options = _ref2.options, name = _ref2.name;
  var _options$offset = options.offset, offset2 = _options$offset === void 0 ? [0, 0] : _options$offset;
  var data = placements.reduce(function(acc, placement) {
    acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset2);
    return acc;
  }, {});
  var _data$state$placement = data[state.placement], x = _data$state$placement.x, y = _data$state$placement.y;
  if (state.modifiersData.popperOffsets != null) {
    state.modifiersData.popperOffsets.x += x;
    state.modifiersData.popperOffsets.y += y;
  }
  state.modifiersData[name] = data;
}
var offset_default = {
  name: "offset",
  enabled: true,
  phase: "main",
  requires: ["popperOffsets"],
  fn: offset
};

// node_modules/@popperjs/core/lib/modifiers/popperOffsets.js
function popperOffsets(_ref) {
  var state = _ref.state, name = _ref.name;
  state.modifiersData[name] = computeOffsets({
    reference: state.rects.reference,
    element: state.rects.popper,
    strategy: "absolute",
    placement: state.placement
  });
}
var popperOffsets_default = {
  name: "popperOffsets",
  enabled: true,
  phase: "read",
  fn: popperOffsets,
  data: {}
};

// node_modules/@popperjs/core/lib/utils/getAltAxis.js
function getAltAxis(axis) {
  return axis === "x" ? "y" : "x";
}

// node_modules/@popperjs/core/lib/modifiers/preventOverflow.js
function preventOverflow(_ref) {
  var state = _ref.state, options = _ref.options, name = _ref.name;
  var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, padding = options.padding, _options$tether = options.tether, tether = _options$tether === void 0 ? true : _options$tether, _options$tetherOffset = options.tetherOffset, tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
  var overflow = detectOverflow(state, {
    boundary,
    rootBoundary,
    padding,
    altBoundary
  });
  var basePlacement = getBasePlacement(state.placement);
  var variation = getVariation(state.placement);
  var isBasePlacement = !variation;
  var mainAxis = getMainAxisFromPlacement(basePlacement);
  var altAxis = getAltAxis(mainAxis);
  var popperOffsets2 = state.modifiersData.popperOffsets;
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var tetherOffsetValue = typeof tetherOffset === "function" ? tetherOffset(Object.assign(Object.assign({}, state.rects), {}, {
    placement: state.placement
  })) : tetherOffset;
  var data = {
    x: 0,
    y: 0
  };
  if (!popperOffsets2) {
    return;
  }
  if (checkMainAxis) {
    var mainSide = mainAxis === "y" ? top : left;
    var altSide = mainAxis === "y" ? bottom : right;
    var len = mainAxis === "y" ? "height" : "width";
    var offset2 = popperOffsets2[mainAxis];
    var min = popperOffsets2[mainAxis] + overflow[mainSide];
    var max = popperOffsets2[mainAxis] - overflow[altSide];
    var additive = tether ? -popperRect[len] / 2 : 0;
    var minLen = variation === start ? referenceRect[len] : popperRect[len];
    var maxLen = variation === start ? -popperRect[len] : -referenceRect[len];
    var arrowElement = state.elements.arrow;
    var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {
      width: 0,
      height: 0
    };
    var arrowPaddingObject = state.modifiersData["arrow#persistent"] ? state.modifiersData["arrow#persistent"].padding : getFreshSideObject();
    var arrowPaddingMin = arrowPaddingObject[mainSide];
    var arrowPaddingMax = arrowPaddingObject[altSide];
    var arrowLen = within(0, referenceRect[len], arrowRect[len]);
    var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - tetherOffsetValue : minLen - arrowLen - arrowPaddingMin - tetherOffsetValue;
    var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + tetherOffsetValue : maxLen + arrowLen + arrowPaddingMax + tetherOffsetValue;
    var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);
    var clientOffset = arrowOffsetParent ? mainAxis === "y" ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
    var offsetModifierValue = state.modifiersData.offset ? state.modifiersData.offset[state.placement][mainAxis] : 0;
    var tetherMin = popperOffsets2[mainAxis] + minOffset - offsetModifierValue - clientOffset;
    var tetherMax = popperOffsets2[mainAxis] + maxOffset - offsetModifierValue;
    var preventedOffset = within(tether ? Math.min(min, tetherMin) : min, offset2, tether ? Math.max(max, tetherMax) : max);
    popperOffsets2[mainAxis] = preventedOffset;
    data[mainAxis] = preventedOffset - offset2;
  }
  if (checkAltAxis) {
    var _mainSide = mainAxis === "x" ? top : left;
    var _altSide = mainAxis === "x" ? bottom : right;
    var _offset = popperOffsets2[altAxis];
    var _min = _offset + overflow[_mainSide];
    var _max = _offset - overflow[_altSide];
    var _preventedOffset = within(_min, _offset, _max);
    popperOffsets2[altAxis] = _preventedOffset;
    data[altAxis] = _preventedOffset - _offset;
  }
  state.modifiersData[name] = data;
}
var preventOverflow_default = {
  name: "preventOverflow",
  enabled: true,
  phase: "main",
  fn: preventOverflow,
  requiresIfExists: ["offset"]
};

// node_modules/@popperjs/core/lib/dom-utils/getHTMLElementScroll.js
function getHTMLElementScroll(element) {
  return {
    scrollLeft: element.scrollLeft,
    scrollTop: element.scrollTop
  };
}

// node_modules/@popperjs/core/lib/dom-utils/getNodeScroll.js
function getNodeScroll(node) {
  if (node === getWindow(node) || !isHTMLElement(node)) {
    return getWindowScroll(node);
  } else {
    return getHTMLElementScroll(node);
  }
}

// node_modules/@popperjs/core/lib/dom-utils/getCompositeRect.js
function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
  if (isFixed === void 0) {
    isFixed = false;
  }
  var documentElement = getDocumentElement(offsetParent);
  var rect = getBoundingClientRect(elementOrVirtualElement);
  var isOffsetParentAnElement = isHTMLElement(offsetParent);
  var scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  var offsets = {
    x: 0,
    y: 0
  };
  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
    if (getNodeName(offsetParent) !== "body" || isScrollParent(documentElement)) {
      scroll = getNodeScroll(offsetParent);
    }
    if (isHTMLElement(offsetParent)) {
      offsets = getBoundingClientRect(offsetParent);
      offsets.x += offsetParent.clientLeft;
      offsets.y += offsetParent.clientTop;
    } else if (documentElement) {
      offsets.x = getWindowScrollBarX(documentElement);
    }
  }
  return {
    x: rect.left + scroll.scrollLeft - offsets.x,
    y: rect.top + scroll.scrollTop - offsets.y,
    width: rect.width,
    height: rect.height
  };
}

// node_modules/@popperjs/core/lib/utils/orderModifiers.js
function order(modifiers) {
  var map = new Map();
  var visited = new Set();
  var result = [];
  modifiers.forEach(function(modifier) {
    map.set(modifier.name, modifier);
  });
  function sort(modifier) {
    visited.add(modifier.name);
    var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
    requires.forEach(function(dep) {
      if (!visited.has(dep)) {
        var depModifier = map.get(dep);
        if (depModifier) {
          sort(depModifier);
        }
      }
    });
    result.push(modifier);
  }
  modifiers.forEach(function(modifier) {
    if (!visited.has(modifier.name)) {
      sort(modifier);
    }
  });
  return result;
}
function orderModifiers(modifiers) {
  var orderedModifiers = order(modifiers);
  return modifierPhases.reduce(function(acc, phase) {
    return acc.concat(orderedModifiers.filter(function(modifier) {
      return modifier.phase === phase;
    }));
  }, []);
}

// node_modules/@popperjs/core/lib/utils/debounce.js
function debounce(fn2) {
  var pending;
  return function() {
    if (!pending) {
      pending = new Promise(function(resolve) {
        Promise.resolve().then(function() {
          pending = void 0;
          resolve(fn2());
        });
      });
    }
    return pending;
  };
}

// node_modules/@popperjs/core/lib/utils/format.js
function format(str) {
  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }
  return [].concat(args).reduce(function(p, c) {
    return p.replace(/%s/, c);
  }, str);
}

// node_modules/@popperjs/core/lib/utils/validateModifiers.js
var INVALID_MODIFIER_ERROR = 'Popper: modifier "%s" provided an invalid %s property, expected %s but got %s';
var MISSING_DEPENDENCY_ERROR = 'Popper: modifier "%s" requires "%s", but "%s" modifier is not available';
var VALID_PROPERTIES = ["name", "enabled", "phase", "fn", "effect", "requires", "options"];
function validateModifiers(modifiers) {
  modifiers.forEach(function(modifier) {
    Object.keys(modifier).forEach(function(key) {
      switch (key) {
        case "name":
          if (typeof modifier.name !== "string") {
            console.error(format(INVALID_MODIFIER_ERROR, String(modifier.name), '"name"', '"string"', '"' + String(modifier.name) + '"'));
          }
          break;
        case "enabled":
          if (typeof modifier.enabled !== "boolean") {
            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"enabled"', '"boolean"', '"' + String(modifier.enabled) + '"'));
          }
        case "phase":
          if (modifierPhases.indexOf(modifier.phase) < 0) {
            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"phase"', "either " + modifierPhases.join(", "), '"' + String(modifier.phase) + '"'));
          }
          break;
        case "fn":
          if (typeof modifier.fn !== "function") {
            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"fn"', '"function"', '"' + String(modifier.fn) + '"'));
          }
          break;
        case "effect":
          if (typeof modifier.effect !== "function") {
            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"effect"', '"function"', '"' + String(modifier.fn) + '"'));
          }
          break;
        case "requires":
          if (!Array.isArray(modifier.requires)) {
            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"requires"', '"array"', '"' + String(modifier.requires) + '"'));
          }
          break;
        case "requiresIfExists":
          if (!Array.isArray(modifier.requiresIfExists)) {
            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"requiresIfExists"', '"array"', '"' + String(modifier.requiresIfExists) + '"'));
          }
          break;
        case "options":
        case "data":
          break;
        default:
          console.error('PopperJS: an invalid property has been provided to the "' + modifier.name + '" modifier, valid properties are ' + VALID_PROPERTIES.map(function(s) {
            return '"' + s + '"';
          }).join(", ") + '; but "' + key + '" was provided.');
      }
      modifier.requires && modifier.requires.forEach(function(requirement) {
        if (modifiers.find(function(mod) {
          return mod.name === requirement;
        }) == null) {
          console.error(format(MISSING_DEPENDENCY_ERROR, String(modifier.name), requirement, requirement));
        }
      });
    });
  });
}

// node_modules/@popperjs/core/lib/utils/uniqueBy.js
function uniqueBy(arr, fn2) {
  var identifiers = new Set();
  return arr.filter(function(item) {
    var identifier = fn2(item);
    if (!identifiers.has(identifier)) {
      identifiers.add(identifier);
      return true;
    }
  });
}

// node_modules/@popperjs/core/lib/utils/mergeByName.js
function mergeByName(modifiers) {
  var merged = modifiers.reduce(function(merged2, current) {
    var existing = merged2[current.name];
    merged2[current.name] = existing ? Object.assign(Object.assign(Object.assign({}, existing), current), {}, {
      options: Object.assign(Object.assign({}, existing.options), current.options),
      data: Object.assign(Object.assign({}, existing.data), current.data)
    }) : current;
    return merged2;
  }, {});
  return Object.keys(merged).map(function(key) {
    return merged[key];
  });
}

// node_modules/@popperjs/core/lib/createPopper.js
var INVALID_ELEMENT_ERROR = "Popper: Invalid reference or popper argument provided. They must be either a DOM element or virtual element.";
var INFINITE_LOOP_ERROR = "Popper: An infinite loop in the modifiers cycle has been detected! The cycle has been interrupted to prevent a browser crash.";
var DEFAULT_OPTIONS = {
  placement: "bottom",
  modifiers: [],
  strategy: "absolute"
};
function areValidElements() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }
  return !args.some(function(element) {
    return !(element && typeof element.getBoundingClientRect === "function");
  });
}
function popperGenerator(generatorOptions) {
  if (generatorOptions === void 0) {
    generatorOptions = {};
  }
  var _generatorOptions = generatorOptions, _generatorOptions$def = _generatorOptions.defaultModifiers, defaultModifiers3 = _generatorOptions$def === void 0 ? [] : _generatorOptions$def, _generatorOptions$def2 = _generatorOptions.defaultOptions, defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
  return function createPopper4(reference2, popper2, options) {
    if (options === void 0) {
      options = defaultOptions;
    }
    var state = {
      placement: "bottom",
      orderedModifiers: [],
      options: Object.assign(Object.assign({}, DEFAULT_OPTIONS), defaultOptions),
      modifiersData: {},
      elements: {
        reference: reference2,
        popper: popper2
      },
      attributes: {},
      styles: {}
    };
    var effectCleanupFns = [];
    var isDestroyed = false;
    var instance = {
      state,
      setOptions: function setOptions(options2) {
        cleanupModifierEffects();
        state.options = Object.assign(Object.assign(Object.assign({}, defaultOptions), state.options), options2);
        state.scrollParents = {
          reference: isElement(reference2) ? listScrollParents(reference2) : reference2.contextElement ? listScrollParents(reference2.contextElement) : [],
          popper: listScrollParents(popper2)
        };
        var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers3, state.options.modifiers)));
        state.orderedModifiers = orderedModifiers.filter(function(m) {
          return m.enabled;
        });
        if (true) {
          var modifiers = uniqueBy([].concat(orderedModifiers, state.options.modifiers), function(_ref) {
            var name = _ref.name;
            return name;
          });
          validateModifiers(modifiers);
          if (getBasePlacement(state.options.placement) === auto) {
            var flipModifier = state.orderedModifiers.find(function(_ref2) {
              var name = _ref2.name;
              return name === "flip";
            });
            if (!flipModifier) {
              console.error(['Popper: "auto" placements require the "flip" modifier be', "present and enabled to work."].join(" "));
            }
          }
          var _getComputedStyle = getComputedStyle2(popper2), marginTop = _getComputedStyle.marginTop, marginRight = _getComputedStyle.marginRight, marginBottom = _getComputedStyle.marginBottom, marginLeft = _getComputedStyle.marginLeft;
          if ([marginTop, marginRight, marginBottom, marginLeft].some(function(margin) {
            return parseFloat(margin);
          })) {
            console.warn(['Popper: CSS "margin" styles cannot be used to apply padding', "between the popper and its reference element or boundary.", "To replicate margin, use the `offset` modifier, as well as", "the `padding` option in the `preventOverflow` and `flip`", "modifiers."].join(" "));
          }
        }
        runModifierEffects();
        return instance.update();
      },
      forceUpdate: function forceUpdate() {
        if (isDestroyed) {
          return;
        }
        var _state$elements = state.elements, reference3 = _state$elements.reference, popper3 = _state$elements.popper;
        if (!areValidElements(reference3, popper3)) {
          if (true) {
            console.error(INVALID_ELEMENT_ERROR);
          }
          return;
        }
        state.rects = {
          reference: getCompositeRect(reference3, getOffsetParent(popper3), state.options.strategy === "fixed"),
          popper: getLayoutRect(popper3)
        };
        state.reset = false;
        state.placement = state.options.placement;
        state.orderedModifiers.forEach(function(modifier) {
          return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
        });
        var __debug_loops__ = 0;
        for (var index = 0; index < state.orderedModifiers.length; index++) {
          if (true) {
            __debug_loops__ += 1;
            if (__debug_loops__ > 100) {
              console.error(INFINITE_LOOP_ERROR);
              break;
            }
          }
          if (state.reset === true) {
            state.reset = false;
            index = -1;
            continue;
          }
          var _state$orderedModifie = state.orderedModifiers[index], fn2 = _state$orderedModifie.fn, _state$orderedModifie2 = _state$orderedModifie.options, _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2, name = _state$orderedModifie.name;
          if (typeof fn2 === "function") {
            state = fn2({
              state,
              options: _options,
              name,
              instance
            }) || state;
          }
        }
      },
      update: debounce(function() {
        return new Promise(function(resolve) {
          instance.forceUpdate();
          resolve(state);
        });
      }),
      destroy: function destroy() {
        cleanupModifierEffects();
        isDestroyed = true;
      }
    };
    if (!areValidElements(reference2, popper2)) {
      if (true) {
        console.error(INVALID_ELEMENT_ERROR);
      }
      return instance;
    }
    instance.setOptions(options).then(function(state2) {
      if (!isDestroyed && options.onFirstUpdate) {
        options.onFirstUpdate(state2);
      }
    });
    function runModifierEffects() {
      state.orderedModifiers.forEach(function(_ref3) {
        var name = _ref3.name, _ref3$options = _ref3.options, options2 = _ref3$options === void 0 ? {} : _ref3$options, effect4 = _ref3.effect;
        if (typeof effect4 === "function") {
          var cleanupFn = effect4({
            state,
            name,
            instance,
            options: options2
          });
          var noopFn = function noopFn2() {
          };
          effectCleanupFns.push(cleanupFn || noopFn);
        }
      });
    }
    function cleanupModifierEffects() {
      effectCleanupFns.forEach(function(fn2) {
        return fn2();
      });
      effectCleanupFns = [];
    }
    return instance;
  };
}
var createPopper = popperGenerator();

// node_modules/@popperjs/core/lib/popper-lite.js
var defaultModifiers = [eventListeners_default, popperOffsets_default, computeStyles_default, applyStyles_default];
var createPopper2 = popperGenerator({
  defaultModifiers
});

// node_modules/@popperjs/core/lib/popper.js
var defaultModifiers2 = [eventListeners_default, popperOffsets_default, computeStyles_default, applyStyles_default, offset_default, flip_default, preventOverflow_default, arrow_default, hide_default];
var createPopper3 = popperGenerator({
  defaultModifiers: defaultModifiers2
});

export {
  require_bootstrap_min
};
//# sourceMappingURL=chunk.NG4HJWRB.js.map
